
// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('collections/WugFeatureCollection',[], function() {
  var WugFeatureCollection;
  return WugFeatureCollection = (function(_super) {

    __extends(WugFeatureCollection, _super);

    function WugFeatureCollection() {
      return WugFeatureCollection.__super__.constructor.apply(this, arguments);
    }

    return WugFeatureCollection;

  })(Backbone.Collection);
});

// Generated by CoffeeScript 1.3.3

define('namespace',['collections/WugFeatureCollection'], function(WugFeatureCollection) {
  var namespace;
  namespace = {};
  namespace.wugFeatureCollection = new WugFeatureCollection();
  namespace.VALID_YEARS = ["2010", "2020", "2030", "2040", "2050", "2060"];
  namespace.currYear = "2010";
  return namespace;
});

// Generated by CoffeeScript 1.3.3

ï»¿define('config/WmsThemeConfig',[], function() {
  var WmsThemeConfig;
  WmsThemeConfig = {
    Layers: [
      {
        name: "Regional Water Planning Areas",
        type: "WMS",
        url: "http://services.tnris.org/arcgis/services/swp/swp/MapServer/WMSServer",
        viewType: "Regions",
        service_params: {
          layers: "4,7",
          transparent: true
        },
        layer_params: {
          isBaseLayer: false,
          visibility: true,
          opacity: 0.6
        }
      }, {
        name: "Texas Counties",
        type: "WMS",
        url: "http://services.tnris.org/arcgis/services/swp/swp/MapServer/WMSServer",
        viewType: "Counties",
        service_params: {
          layers: "1,13",
          transparent: true
        },
        layer_params: {
          isBaseLayer: false,
          visibility: false,
          opacity: 0.6
        }
      }, {
        name: "Texas Senate Districts (2011)",
        type: "WMS",
        url: "http://services.tnris.org/arcgis/services/swp/swp/MapServer/WMSServer",
        viewType: "SenateDistricts",
        service_params: {
          layers: "3,9",
          transparent: true
        },
        layer_params: {
          isBaseLayer: false,
          visibility: false,
          opacity: 0.6
        }
      }, {
        name: "Texas House Districts (2011)",
        type: "WMS",
        url: "http://services.tnris.org/arcgis/services/swp/swp/MapServer/WMSServer",
        viewType: "HouseDistricts",
        service_params: {
          layers: "2,11",
          transparent: true
        },
        layer_params: {
          isBaseLayer: false,
          visibility: false,
          opacity: 0.6
        }
      }, {
        name: "Water System Service Areas",
        type: "WMS",
        url: "http://services.tnris.org/arcgis/services/swp/SWP_Boundaries/MapServer/WMSServer",
        service_params: {
          layers: "0",
          transparent: true
        },
        layer_params: {
          isBaseLayer: false,
          visibility: false,
          opacity: 0.6
        }
      }
    ]
  };
  return WmsThemeConfig;
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/MapView',['namespace', 'config/WmsThemeConfig'], function(namespace, WmsThemeConfig) {
  var MapView;
  return MapView = (function(_super) {

    __extends(MapView, _super);

    function MapView() {
      return MapView.__super__.constructor.apply(this, arguments);
    }

    MapView.prototype.origCenter = new OpenLayers.LonLat(-99.294317, 31.348335).transform(new OpenLayers.Projection("EPSG:4326"), new OpenLayers.Projection("EPSG:3857"));

    MapView.prototype.origZoom = 5;

    MapView.prototype.map = null;

    MapView.prototype.bingApiKey = '';

    MapView.prototype.baseLayers = ['esri_gray', 'mapquest_open', 'mapquest_aerial', 'bing_road', 'bing_hybrid', 'bing_aerial'];

    MapView.prototype.MAX_WUG_RADIUS = 18;

    MapView.prototype.MIN_WUG_RADIUS = 6;

    MapView.prototype.initialize = function(config) {
      this.$el = $("#" + config.mapContainerId);
      this.el = this.$el[0];
      this.bingApiKey = config.bingApiKey;
      _.bindAll(this, 'render', 'unrender', 'resetExtent', 'showPlaceFeature', 'transformToWebMerc', 'resetWugFeatures', 'clearWugFeatures', 'selectWugFeature', 'unselectWugFeatures', '_setupWugHighlightControl', '_setupOverlayLayers', 'showWmsOverlayByViewType', 'hideWmsOverlays', 'showMapLoading', 'hideMapLoading', '_setupWugClickControl');
      namespace.wugFeatureCollection.on('reset', this.resetWugFeatures);
      return null;
    };

    MapView.prototype.render = function() {
      this.$el.empty();
      this.map = new OpenLayers.Map({
        div: this.$el[0],
        projection: new OpenLayers.Projection("EPSG:3857"),
        displayProjection: new OpenLayers.Projection("EPSG:4326"),
        layers: this._setupBaseLayers(this.baseLayers),
        center: this.origCenter,
        zoom: this.origZoom,
        eventListeners: {}
      });
      this._setupOverlayLayers();
      this.map.addControl(new OpenLayers.Control.LayerSwitcher());
      return this;
    };

    MapView.prototype.unrender = function() {
      this.$el.remove();
      return null;
    };

    MapView.prototype.resetWugFeatures = function(featureCollection) {
      var bounds, m, max_supply, min_supply, newFeature, wktFormat, wugFeatures, _i, _len, _ref;
      this.clearWugFeatures();
      if (featureCollection.models.length < 1) {
        return;
      }
      this.wugLayer = new OpenLayers.Layer.Vector("Water User Groups", {
        styleMap: this._wugStyleMap,
        displayInLayerSwitcher: false
      });
      wktFormat = new OpenLayers.Format.WKT();
      max_supply = featureCollection.max(function(m) {
        return m.get("sourceSupply");
      }).get("sourceSupply");
      min_supply = featureCollection.min(function(m) {
        return m.get("sourceSupply");
      }).get("sourceSupply");
      bounds = null;
      wugFeatures = [];
      _ref = featureCollection.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        console.log(m.get("type"));
        newFeature = wktFormat.read(m.get('wktGeog'));
        newFeature.attributes = m.attributes;
        newFeature.size = this._calculateScaledValue(max_supply, min_supply, this.MAX_WUG_RADIUS, this.MIN_WUG_RADIUS, m.get("sourceSupply"));
        delete newFeature.attributes.wktGeog;
        newFeature.geometry = newFeature.geometry.transform(this.map.displayProjection, this.map.projection);
        if (!(bounds != null)) {
          bounds = newFeature.geometry.getBounds().clone();
        } else {
          bounds.extend(newFeature.geometry.getBounds());
        }
        wugFeatures.push(newFeature);
      }
      this.wugLayer.addFeatures(wugFeatures);
      this.map.addLayer(this.wugLayer);
      this.wugHighlightControl = this._setupWugHighlightControl();
      this.map.addControl(this.wugHighlightControl);
      this.wugClickControl = this._setupWugClickControl();
      this.map.addControl(this.wugClickControl);
      this.map.zoomToExtent(bounds);
    };

    MapView.prototype.clearWugFeatures = function() {
      this.unselectWugFeatures();
      if (this.wugHighlightControl != null) {
        this.wugHighlightControl.destroy();
        this.wugHighlightControl = null;
      }
      if (this.wugClickControl != null) {
        this.wugClickControl.destroy();
        this.wugClickControl = null;
      }
      if (this.wugLayer != null) {
        this.wugLayer.destroy();
      }
    };

    MapView.prototype.selectWugFeature = function(wugId) {
      var wugFeature, _i, _len, _ref;
      if (!(this.wugHighlightControl != null)) {
        return;
      }
      _ref = this.wugLayer.features;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        wugFeature = _ref[_i];
        if (wugFeature.attributes.id === wugId) {
          this.wugHighlightControl.select(wugFeature);
          return;
        }
      }
    };

    MapView.prototype.unselectWugFeatures = function() {
      if (!(this.wugHighlightControl != null) || !(this.wugHighlightControl.layer.selectedFeatures != null)) {
        return;
      }
      this.wugHighlightControl.unselectAll();
    };

    MapView.prototype.hideWmsOverlays = function() {
      var layer, _i, _len, _ref;
      _ref = this.map.layers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        if (!layer.isBaseLayer) {
          layer.setVisibility(false);
        }
      }
    };

    MapView.prototype.showWmsOverlayByViewType = function(viewType) {
      var layer, _i, _len, _ref;
      _ref = this.map.getLayersBy("viewType", viewType);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        layer.setVisibility(true);
      }
    };

    MapView.prototype._setupOverlayLayers = function() {
      var layerConfig, overlay, _i, _len, _ref;
      _ref = WmsThemeConfig.Layers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layerConfig = _ref[_i];
        switch (layerConfig.type) {
          case "WMS":
            overlay = new OpenLayers.Layer.WMS(layerConfig.name, layerConfig.url, layerConfig.service_params, layerConfig.layer_params);
            overlay.viewType = layerConfig.viewType;
            this.map.addLayer(overlay);
            break;
          default:
            throw "Unsupported Layer Type";
        }
      }
    };

    MapView.prototype._setupWugClickControl = function() {
      var control,
        _this = this;
      control = new OpenLayers.Control.SelectFeature(this.wugLayer, {
        autoActivate: true,
        clickFeature: function(wugFeature) {
          var wugId;
          if ((wugFeature.attributes.type != null) && wugFeature.attributes.type === "WWP") {
            return;
          }
          wugId = wugFeature.attributes.id;
          Backbone.history.navigate("#/" + namespace.currYear + "/wms/entity/" + wugId, {
            trigger: true
          });
        }
      });
      return control;
    };

    MapView.prototype._setupWugHighlightControl = function() {
      var control, timer,
        _this = this;
      timer = null;
      control = new OpenLayers.Control.SelectFeature(this.wugLayer, {
        multiple: false,
        hover: true,
        autoActivate: true,
        overFeature: function(feature) {
          var layer,
            _this = this;
          layer = feature.layer;
          if (this.hover) {
            if (this.highlightOnly) {
              this.highlight(feature);
            } else if (OpenLayers.Util.indexOf(layer.selectedFeatures, feature) === -1) {
              timer = _.delay(function() {
                return _this.select(feature);
              }, 400);
            }
          }
        },
        onSelect: function(wugFeature) {
          var popup;
          popup = new OpenLayers.Popup.FramedCloud("wugpopup", wugFeature.geometry.getBounds().getCenterLonLat(), null, "                                <b>" + wugFeature.attributes.name + "</b><br/>                                " + namespace.currYear + " Supply: " + ($.number(wugFeature.attributes.sourceSupply)) + " ac-ft/yr                            ", null, false);
          popup.autoSize = true;
          wugFeature.popup = popup;
          _this.map.addPopup(popup);
        },
        onUnselect: function(wugFeature) {
          clearTimeout(timer);
          if (wugFeature.popup != null) {
            _this.map.removePopup(wugFeature.popup);
            wugFeature.popup.destroy();
            wugFeature.popup = null;
          }
        }
      });
      return control;
    };

    MapView.prototype._calculateScaledValue = function(max, min, scale_max, scale_min, val) {
      var scaled_val;
      if (max === min) {
        return scale_min;
      }
      scaled_val = (scale_max - scale_min) * (val - min) / (max - min) + scale_min;
      return scaled_val;
    };

    MapView.prototype.resetExtent = function() {
      var zoom;
      zoom = this.origZoom;
      if (this.map.baseLayer instanceof OpenLayers.Layer.Bing) {
        zoom = this.origZoom - 1;
      }
      this.map.setCenter(this.origCenter, zoom);
    };

    MapView.prototype.showPlaceFeature = function(placeFeature) {
      var bounds, feature, wktFormat;
      wktFormat = new OpenLayers.Format.WKT();
      feature = wktFormat.read(placeFeature.get('wktGeog'));
      this.transformToWebMerc(feature.geometry);
      bounds = feature.geometry.getBounds();
      this.map.zoomToExtent(bounds);
    };

    MapView.prototype.transformToWebMerc = function(geometry) {
      return geometry.transform(this.map.displayProjection, this.map.projection);
    };

    MapView.prototype.showMapLoading = function() {
      if (!(this.$loadingOverlay != null)) {
        this.$loadingOverlay = $('<div></div>');
        this.$loadingOverlay.height(this.$el.height()).width(this.$el.width());
        this.$loadingOverlay.addClass('mapLoadingOverlay');
        this.$el.prepend(this.$loadingOverlay);
      }
    };

    MapView.prototype.hideMapLoading = function() {
      if (this.$loadingOverlay != null) {
        this.$loadingOverlay.remove();
        this.$loadingOverlay = null;
      }
    };

    MapView.prototype._setupBaseLayers = function(baseLayers) {
      var layer_name, layers, _i, _len;
      layers = [];
      if (!(baseLayers != null) || baseLayers.length === 0) {
        throw new Error("Must specify baseLayers.");
      }
      for (_i = 0, _len = baseLayers.length; _i < _len; _i++) {
        layer_name = baseLayers[_i];
        switch (layer_name) {
          case 'mapquest_open':
            layers.push(new OpenLayers.Layer.XYZ("MapQuest Open Street", ["http://otile1.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png", "http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png", "http://otile3.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png", "http://otile4.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png"], {
              attribution: "Tiles courtesy <a href='http://www.mapquest.com/' target='_blank'>MapQuest</a>",
              transitionEffect: "resize",
              isBaseLayer: true
            }));
            break;
          case 'mapquest_aerial':
            layers.push(new OpenLayers.Layer.XYZ("MapQuest Open Aerial", ["http://oatile1.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png", "http://oatile2.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png", "http://oatile3.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png", "http://oatile4.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png"], {
              attribution: "Tiles courtesy <a href='http://www.mapquest.com/' target='_blank'>MapQuest</a>",
              transitionEffect: "resize",
              isBaseLayer: true
            }));
            break;
          case 'bing_road':
            layers.push(new OpenLayers.Layer.Bing({
              name: "Bing Road",
              key: this.bingApiKey,
              type: "Road",
              transitionEffect: "resize",
              isBaseLayer: true
            }));
            break;
          case 'bing_hybrid':
            layers.push(new OpenLayers.Layer.Bing({
              name: "Bing Hybrid",
              key: this.bingApiKey,
              type: "AerialWithLabels",
              transitionEffect: "resize",
              isBaseLayer: true
            }));
            break;
          case 'bing_aerial':
            layers.push(new OpenLayers.Layer.Bing({
              name: "Bing Aerial",
              key: this.bingApiKey,
              type: "Aerial",
              transitionEffect: "resize",
              isBaseLayer: true
            }));
            break;
          case 'esri_gray':
            layers.push(new OpenLayers.Layer.XYZ('ESRI Gray', ['http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/${z}/${y}/${x}'], {
              attribution: "Tiles courtesy <a href='http://www.esri.com' target='_blank'>esri</a>",
              isBaseLayer: true
            }));
            break;
          case 'stamen_toner':
            layers.push(new OpenLayers.Layer.Stamen("toner-lite", "Stamen Toner"));
            break;
          case 'stamen_watercolor':
            layers.push(new OpenLayers.Layer.Stamen("watercolor", "Stamen Watercolor"));
        }
      }
      return layers;
    };

    MapView.prototype._wugStyleMap = new OpenLayers.StyleMap({
      "default": new OpenLayers.Style({
        pointRadius: '${getPointRadius}',
        strokeColor: "yellow",
        strokeWidth: 1,
        fillColor: "${getFillColor}",
        fillOpacity: 0.8
      }, {
        context: {
          getPointRadius: function(feature) {
            if (feature.size != null) {
              return feature.size;
            }
            return 6;
          },
          getFillColor: function(feature) {
            if ((feature.attributes.type != null) && feature.attributes.type === "WWP") {
              return 'gray';
            }
            return 'green';
          }
        },
        rules: [
          new OpenLayers.Rule({
            maxScaleDenominator: 866688,
            symbolizer: {
              fontSize: "11px",
              labelAlign: 'cb',
              labelOutlineColor: "yellow",
              labelOutlineWidth: 2,
              labelYOffset: 8,
              label: "${name}"
            }
          }), new OpenLayers.Rule({
            minScaleDenominator: 866688,
            symbolizer: {}
          })
        ]
      }),
      "select": new OpenLayers.Style({
        fillColor: "yellow",
        strokeColor: "green",
        fillOpacity: 1
      })
    });

    return MapView;

  })(Backbone.View);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('collections/StrategyTypeCollection',[], function() {
  var StrategyTypeCollection;
  return StrategyTypeCollection = (function(_super) {

    __extends(StrategyTypeCollection, _super);

    function StrategyTypeCollection() {
      return StrategyTypeCollection.__super__.constructor.apply(this, arguments);
    }

    StrategyTypeCollection.prototype.url = "" + BASE_API_PATH + "api/strategy/types";

    return StrategyTypeCollection;

  })(Backbone.Collection);
});

/**
 * @license RequireJS text 2.0.3 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require: false, XMLHttpRequest: false, ActiveXObject: false,
  define: false, window: false, process: false, Packages: false,
  java: false, location: false */

define('scripts/text',['module'], function (module) {
    

    var text, fs,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = [],
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.3',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var strip = false, index = name.indexOf("."),
                modName = name.substring(0, index),
                ext = name.substring(index + 1, name.length);

            index = ext.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = ext.substring(index + 1, ext.length);
                strip = strip === "strip";
                ext = ext.substring(0, index);
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + '.' +
                                     parsed.ext) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node)) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback) {
            var file = fs.readFileSync(url, 'utf8');
            //Remove BOM (Byte Mark Order) from utf8 files if it is there.
            if (file.indexOf('\uFEFF') === 0) {
                file = file.substring(1);
            }
            callback(file);
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback) {
            var xhr = text.createXhr();
            xhr.open('GET', url, true);

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        errback(err);
                    } else {
                        callback(xhr.responseText);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                stringBuffer.append(line);

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    }

    return text;
});

define('scripts/text!templates/strategyTypeListItem.html',[],function () { return '<li>\r\n    <a href="#/{{currYear}}/wms/type/{{m.id}}">\r\n        {{m.name}}\r\n    </a>\r\n</li>';});

define('scripts/text!templates/themeNav.html',[],function () { return '<ul class="nav nav-pills" id="themeNav">\r\n    <li class="nav-label">THEME:</li>\r\n    <li class="dropdown">\r\n        <a class="dropdown-toggle" data-toggle="dropdown" href="#">\r\n            <span>Water Management Strategies</span>\r\n            <b class="caret"></b>\r\n        </a>\r\n        <ul class="dropdown-menu" id="strategyTypeList">\r\n            <li>\r\n                <a href="#/{{currYear}}/wms">\r\n                    NET COUNTY SUPPLIES\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n    <li class="disabled"><a href="#">Water Use</a></li>\r\n    <li class="disabled"><a href="#">Sources</a></li>\r\n</ul>\r\n';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/ThemeNavToolbarView',['namespace', 'collections/StrategyTypeCollection', 'scripts/text!templates/strategyTypeListItem.html', 'scripts/text!templates/themeNav.html'], function(namespace, StrategyTypeCollection, strategyTypeListItemTpl, tpl) {
  var ThemeNavToolbarView;
  return ThemeNavToolbarView = (function(_super) {

    __extends(ThemeNavToolbarView, _super);

    function ThemeNavToolbarView() {
      return ThemeNavToolbarView.__super__.constructor.apply(this, arguments);
    }

    ThemeNavToolbarView.prototype.template = _.template(tpl);

    ThemeNavToolbarView.prototype.initialize = function(options) {
      _.bindAll(this, 'render', 'unrender', 'renderStrategyTypeList', 'enableStrategyTypeList', 'disableStrategyTypeList');
      return null;
    };

    ThemeNavToolbarView.prototype.render = function() {
      this.$el.empty();
      this.$el.html(this.template({
        currYear: namespace.currYear
      }));
      ko.applyBindings(this, this.el);
      this.renderStrategyTypeList();
      return this;
    };

    ThemeNavToolbarView.prototype.renderStrategyTypeList = function() {
      var stratTypeLiTemplate, typeCollection,
        _this = this;
      stratTypeLiTemplate = _.template(strategyTypeListItemTpl);
      typeCollection = new StrategyTypeCollection();
      typeCollection.fetch({
        success: function(collection) {
          var res, strategyType, _i, _len, _ref;
          _ref = collection.models;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            strategyType = _ref[_i];
            res = _this.$('#strategyTypeList').append(stratTypeLiTemplate({
              m: strategyType.toJSON(),
              currYear: namespace.currYear
            }));
          }
        }
      });
    };

    ThemeNavToolbarView.prototype.disableStrategyTypeList = function() {
      this.$('.dropdown-toggle').attr('data-toggle', null).parent('li').addClass('disabled').on('click.me', function(event) {
        event.preventDefault();
      });
    };

    ThemeNavToolbarView.prototype.enableStrategyTypeList = function() {
      this.$('.dropdown-toggle').attr('data-toggle', 'dropdown').parent('li').removeClass('disabled').off('click.me');
    };

    ThemeNavToolbarView.prototype.unrender = function() {
      this.$el.remove();
      return null;
    };

    return ThemeNavToolbarView;

  })(Backbone.View);
});

define('scripts/text!templates/yearNav.html',[],function () { return '<ul class="nav nav-pills" id="yearNav">\r\n    <li class="nav-label">DECADE:</li>\r\n    <li><a href="#" data-bind="click: changeYear" data-value="2010">2010</a></li>\r\n    <li><a href="#" data-bind="click: changeYear" data-value="2020">2020</a></li>\r\n    <li><a href="#" data-bind="click: changeYear" data-value="2030">2030</a></li>\r\n    <li><a href="#" data-bind="click: changeYear" data-value="2040">2040</a></li>\r\n    <li><a href="#" data-bind="click: changeYear" data-value="2050">2050</a></li>\r\n    <li><a href="#" data-bind="click: changeYear" data-value="2060">2060</a></li>\r\n</ul>';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/YearNavView',['namespace', 'scripts/text!templates/yearNav.html'], function(namespace, tpl) {
  var YearNavView;
  return YearNavView = (function(_super) {

    __extends(YearNavView, _super);

    function YearNavView() {
      return YearNavView.__super__.constructor.apply(this, arguments);
    }

    YearNavView.prototype.template = _.template(tpl);

    YearNavView.prototype.initialize = function(options) {
      _.bindAll(this, 'render', 'unrender', 'changeYear', 'disableYearButtons', 'enableYearButtons');
      return null;
    };

    YearNavView.prototype.render = function() {
      this.$el.empty();
      this.currentYear = ko.observable(namespace.currYear);
      this.$el.html(this.template());
      ko.applyBindings(this, this.el);
      this.$("a[data-value='" + namespace.currYear + "']").parent().addClass('active');
      return this;
    };

    YearNavView.prototype.disableYearButtons = function() {
      this.$('a').parents('li').addClass('disabled');
    };

    YearNavView.prototype.enableYearButtons = function() {
      this.$('a').parents('li').removeClass('disabled');
    };

    YearNavView.prototype.unrender = function() {
      kb.release(this);
      this.$el.remove();
      return null;
    };

    YearNavView.prototype.changeYear = function(data, event) {
      var $target;
      $target = $(event.target);
      this.currentYear($target.data('value'));
      $target.parent().siblings().removeClass('active');
      $target.parent().addClass('active');
      return null;
    };

    return YearNavView;

  })(Backbone.View);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('models/PlaceFeatureModel',[], function() {
  var PlaceFeature;
  return PlaceFeature = (function(_super) {

    __extends(PlaceFeature, _super);

    function PlaceFeature() {
      return PlaceFeature.__super__.constructor.apply(this, arguments);
    }

    PlaceFeature.prototype.url = "" + BASE_API_PATH + "api/place/feature/hull";

    return PlaceFeature;

  })(Backbone.Model);
});

define('scripts/text!templates/mapBottomRightTools.html',[],function () { return '<div class="pull-right">\r\n\r\n    <div class="input-append map-stuff">\r\n        <input id="goToPlaceInput" type="text" placeholder="Go to Location" />\r\n        <button class="btn btn-primary" type="button" data-loading-text="...">Go</button>\r\n    </div>\r\n\r\n</div>\r\n\r\n<div class="pull-right">\r\n    <button class="btn" type="button" data-bind="click: toggleAreaSelects" data-toggle="#areaSelectContainer" data-title-orig="Select Strategies by Area">\r\n        <span class="title">Hide Area Selection</span> <i class="icon-caret-up"></i>\r\n    </button>\r\n    &nbsp;\r\n</div>';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/MapBottomToolbarView',['models/PlaceFeatureModel', 'scripts/text!templates/mapBottomRightTools.html'], function(PlaceFeature, tpl) {
  var MapBottomToolbarView;
  return MapBottomToolbarView = (function(_super) {

    __extends(MapBottomToolbarView, _super);

    function MapBottomToolbarView() {
      return MapBottomToolbarView.__super__.constructor.apply(this, arguments);
    }

    MapBottomToolbarView.prototype.template = _.template(tpl);

    MapBottomToolbarView.prototype.mapView = null;

    MapBottomToolbarView.prototype.initialize = function(options) {
      _.bindAll(this, 'render', 'unrender', 'showPlaceFeature');
      this.mapView = options.mapView;
    };

    MapBottomToolbarView.prototype.render = function() {
      this.$el.html(this.template());
      ko.applyBindings(this, this.el);
      this.$('#goToPlaceInput').place_typeahead({
        minLength: 2,
        source: function(query, process) {
          this.$element.data('selected-place-id', null);
          return $.get("" + BASE_API_PATH + "api/place", {
            name: query
          }, function(places) {
            return process(places);
          });
        },
        buttonClick: this.showPlaceFeature
      });
      return this;
    };

    MapBottomToolbarView.prototype.unrender = function() {
      this.$el.remove();
      return null;
    };

    MapBottomToolbarView.prototype.toggleAreaSelects = function(data, event) {
      var $target, toggleSelector;
      $target = $(event.delegateTarget);
      toggleSelector = $target.data('toggle');
      $(toggleSelector).slideToggle(300, function() {
        var $i, oldTitle;
        $i = $('i', $target);
        if ($i.hasClass('icon-caret-up')) {
          $i.removeClass('icon-caret-up');
          $i.addClass('icon-caret-down');
        } else {
          $i.addClass('icon-caret-up');
          $i.removeClass('icon-caret-down');
        }
        oldTitle = $('.title', $target).html();
        $('.title', $target).html($target.attr('data-title-orig'));
        return $target.attr('data-title-orig', oldTitle);
      });
    };

    MapBottomToolbarView.prototype.showPlaceFeature = function() {
      var placeFeature, selectedPlaceId,
        _this = this;
      selectedPlaceId = this.$('#goToPlaceInput').data('selected-place-id');
      placeFeature = new PlaceFeature();
      placeFeature.fetch({
        data: {
          placeId: selectedPlaceId
        },
        success: function(model) {
          return _this.mapView.showPlaceFeature(model);
        }
      });
    };

    return MapBottomToolbarView;

  })(Backbone.View);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/BaseTableCollectionView',['namespace'], function(namespace) {
  var BaseTableCollectionView;
  return BaseTableCollectionView = (function(_super) {

    __extends(BaseTableCollectionView, _super);

    function BaseTableCollectionView() {
      return BaseTableCollectionView.__super__.constructor.apply(this, arguments);
    }

    BaseTableCollectionView.prototype.initialize = function(ModelView, Collection, tpl, options) {
      _.bindAll(this, 'render', 'unrender', 'fetchCollection', 'appendModel', 'hideLoading', 'showLoading', 'fetchCallback', '_setupDataTable', 'connectTableRowsToWugFeatures', 'showNothingFound', 'hideNothingFound');
      options = options || {};
      this.fetchParams = options.fetchParams || {};
      this.currYear = ko.observable(namespace.currYear);
      this.template = _.template(tpl);
      this.collection = new Collection();
      this.ModelView = ModelView;
      return null;
    };

    BaseTableCollectionView.prototype.render = function() {
      this.$el.html(this.template());
      this.fetchCollection();
      this.selectedWug = ko.observable();
      ko.applyBindings(this, this.el);
      this.$('.has-popover').popover({
        trigger: 'hover',
        placement: 'top'
      });
      return this;
    };

    BaseTableCollectionView.prototype.unrender = function() {
      this.$el.html();
      return null;
    };

    BaseTableCollectionView.prototype.fetchCollection = function() {
      var params,
        _this = this;
      this.$('tbody').empty();
      params = _.extend({
        year: namespace.currYear
      }, this.fetchParams);
      this.trigger("table:startload");
      this.collection.fetch({
        data: params,
        success: function(collection) {
          var m, _i, _len, _ref;
          if (collection.models.length === 0) {
            _this.trigger("table:nothingfound");
          } else {
            _ref = collection.models;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              m = _ref[_i];
              _this.appendModel(m);
            }
            _this.$('.has-popover').popover({
              trigger: 'hover'
            });
            _this._setupDataTable();
            _this.connectTableRowsToWugFeatures();
            if ((_this.fetchCallback != null) && _.isFunction(_this.fetchCallback)) {
              _this.fetchCallback(collection.models);
            }
            _this.trigger("table:endload");
          }
        },
        error: function() {
          _this.trigger("table:fetcherror");
        }
      });
    };

    BaseTableCollectionView.prototype.fetchCallback = function(strategyModels) {
      var newWugList;
      newWugList = _.map(strategyModels, function(m) {
        return {
          id: m.get("recipientEntityId"),
          name: m.get("recipientEntityName"),
          wktGeog: m.get("recipientEntityWktGeog"),
          sourceSupply: m.get("supply" + namespace.currYear),
          type: m.get("recipientEntityType")
        };
      });
      namespace.wugFeatureCollection.reset(newWugList);
    };

    BaseTableCollectionView.prototype._setupDataTable = function() {
      var $table, dtColConfig;
      $table = this.$('table');
      dtColConfig = [];
      $('th', $table).each(function(i, th) {
        var $th;
        $th = $(th);
        if ($th.attr('data-sort') != null) {
          return dtColConfig.push({
            sType: $(th).attr('data-sort')
          });
        } else {
          return dtColConfig.push(null);
        }
      });
      $table.dataTable({
        bDestroy: true,
        sPaginationType: "bootstrap",
        aLengthMenu: [[10, 25, 50, 100, 99999], [10, 25, 50, 100, "All"]],
        aoColumns: dtColConfig
      });
    };

    BaseTableCollectionView.prototype.connectTableRowsToWugFeatures = function() {
      var me;
      me = this;
      this.$('table tbody').delegate('tr', 'hover', function(event) {
        var $target, wugId;
        if (event.type === 'mouseenter') {
          $target = $(this);
          wugId = $target.data('entity-id');
          me.selectedWug(wugId);
        } else {
          me.selectedWug(null);
        }
      });
    };

    BaseTableCollectionView.prototype.appendModel = function(model) {
      var modelView;
      modelView = new this.ModelView({
        model: model,
        currYear: namespace.currYear
      });
      this.$('tbody').append(modelView.render().el);
    };

    BaseTableCollectionView.prototype.showNothingFound = function() {
      $('#nothingFoundMessage').fadeIn();
      this.$el.hide();
    };

    BaseTableCollectionView.prototype.hideNothingFound = function() {
      $('#nothingFoundMessage').hide();
    };

    BaseTableCollectionView.prototype.showLoading = function() {
      this.$el.hide();
      this.hideNothingFound();
      $('.tableLoading').show();
    };

    BaseTableCollectionView.prototype.hideLoading = function() {
      $('.tableLoading').hide();
      this.$el.fadeIn();
    };

    return BaseTableCollectionView;

  })(Backbone.View);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/BaseStrategyView',['namespace'], function(namespace) {
  var BaseStrategyView;
  return BaseStrategyView = (function(_super) {

    __extends(BaseStrategyView, _super);

    function BaseStrategyView() {
      return BaseStrategyView.__super__.constructor.apply(this, arguments);
    }

    BaseStrategyView.prototype.tagName = 'tr';

    BaseStrategyView.prototype.initialize = function(options) {
      if (!(this.template != null) && !(options.template != null)) {
        throw "Must specify template";
      }
      if (options.template != null) {
        this.template = options.template;
      }
      BaseStrategyView.__super__.initialize.call(this, options);
      _.bindAll(this, 'render', 'unrender');
      this.template = _.template(this.template);
      return null;
    };

    BaseStrategyView.prototype.render = function() {
      this.$el.html(this.template({
        m: this.model.toJSON(),
        currYear: namespace.currYear
      }));
      this.$el.attr('data-entity-id', this.model.get("recipientEntityId"));
      return this;
    };

    BaseStrategyView.prototype.unrender = function() {
      this.$el.remove();
      return null;
    };

    return BaseStrategyView;

  })(Backbone.View);
});

define('scripts/text!templates/countyNetSupplyRow.html',[],function () { return '\r\n<td>\r\n    <a href="#/{{currYear}}/wms/county/{{m.countyId}}">\r\n        {{m.countyName}}\r\n    </a>\r\n</td>\r\n<td>\r\n    <a href="#/{{currYear}}/wms/region/{{m.regionLetter}}">\r\n        {{m.regionLetter}}\r\n    </a>\r\n</td>\r\n<td>{{ $.number(m.netMunicipal) }}</td>\r\n<td>{{ $.number(m.netIrrigation) }}</td>\r\n<td>{{ $.number(m.netManufacturing) }}</td>\r\n<td>{{ $.number(m.netLivestock) }}</td>\r\n<td>{{ $.number(m.netSteamElectric) }}</td>\r\n<td>{{ $.number(m.netMining) }}</td>\r\n<td><b>{{ $.number(m.netSupplyTotal) }}</b></td>\r\n';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/CountyNetSupplyView',['namespace', 'views/BaseStrategyView', 'scripts/text!templates/countyNetSupplyRow.html'], function(namespace, BaseStrategyView, tpl) {
  var CountyNetSupplyView;
  return CountyNetSupplyView = (function(_super) {

    __extends(CountyNetSupplyView, _super);

    function CountyNetSupplyView() {
      return CountyNetSupplyView.__super__.constructor.apply(this, arguments);
    }

    CountyNetSupplyView.prototype.template = tpl;

    return CountyNetSupplyView;

  })(BaseStrategyView);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('collections/CountyNetSupplyCollection',[], function() {
  var CountyNetSupplyCollection;
  return CountyNetSupplyCollection = (function(_super) {

    __extends(CountyNetSupplyCollection, _super);

    function CountyNetSupplyCollection() {
      return CountyNetSupplyCollection.__super__.constructor.apply(this, arguments);
    }

    CountyNetSupplyCollection.prototype.url = "" + BASE_API_PATH + "api/supply/county-net";

    return CountyNetSupplyCollection;

  })(Backbone.Collection);
});

define('scripts/text!templates/countyNetSupplyTable.html',[],function () { return '<h2>Net Supplies to Counties from Recommended Water Management Strategies - <span data-bind="text: currYear"></span></h2>\r\n<p>All supply amounts are in units of acre-feet/year.</p>\r\n\r\n<table class="table table-hover table-striped table-bordered table-condensed modelTable">\r\n    <thead>\r\n        <tr>\r\n            <th>\r\n                County\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="State Water Plan Planning Region">\r\n                    Region\r\n                </span>\r\n            </th>\r\n            <th data-sort="formatted-int">\r\n                <span class="has-popover" data-content="Total Municipal supply (in acre-feet/year) provided by all Water Management Strategies) in each county">\r\n                    Municipal\r\n                </span>\r\n            </th>\r\n            <th data-sort="formatted-int">\r\n                <span class="has-popover" data-content="Total Irrigation supply (in acre-feet/year) provided by all Water Management Strategies) in each county">\r\n                    Irrigation\r\n                </span>\r\n            </th>\r\n            <th data-sort="formatted-int">\r\n                <span class="has-popover" data-content="Total Manufacturing supply (in acre-feet/year) provided by all Water Management Strategies) in each county">\r\n                    Manufacturing\r\n                </span>\r\n            </th>\r\n            <th data-sort="formatted-int">\r\n                <span class="has-popover" data-content="Total Livestock supply (in acre-feet/year) provided by all Water Management Strategies) in each county">\r\n                    Livestock\r\n                </span>\r\n            </th>\r\n            <th data-sort="formatted-int">\r\n                <span class="has-popover" data-content="Total Steam-Electric Power supply (in acre-feet/year) provided by all Water Management Strategies) in each county">\r\n                    Steam-Electric Power\r\n                </span>\r\n            </th>\r\n            <th data-sort="formatted-int">\r\n                <span class="has-popover" data-content="Total Mining supply (in acre-feet/year) provided by all Water Management Strategies) in each county">\r\n                    Mining\r\n                </span>\r\n            </th>\r\n            <th data-sort="formatted-int">\r\n                <span class="has-popover" data-content="Total supply (in acre-feet/year) provided by all Water Management Strategies) in each county">\r\n                    TOTAL\r\n                </span>\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n\r\n    </tbody>\r\n</table>\r\n';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/CountyNetSupplyCollectionView',['views/BaseTableCollectionView', 'views/CountyNetSupplyView', 'collections/CountyNetSupplyCollection', 'scripts/text!templates/countyNetSupplyTable.html'], function(BaseTableCollectionView, CountyNetSupplyView, CountyNetSupplyCollection, tpl) {
  var CountyNetSupplyCollectionView;
  return CountyNetSupplyCollectionView = (function(_super) {

    __extends(CountyNetSupplyCollectionView, _super);

    function CountyNetSupplyCollectionView() {
      return CountyNetSupplyCollectionView.__super__.constructor.apply(this, arguments);
    }

    CountyNetSupplyCollectionView.prototype.initialize = function(options) {
      _.bindAll(this);
      return CountyNetSupplyCollectionView.__super__.initialize.call(this, CountyNetSupplyView, CountyNetSupplyCollection, tpl);
    };

    CountyNetSupplyCollectionView.prototype.fetchCallback = function() {
      return null;
    };

    return CountyNetSupplyCollectionView;

  })(BaseTableCollectionView);
});

define('scripts/text!templates/strategyRow.html',[],function () { return '\r\n<td>\r\n    <a href="#/{{currYear}}/wms/type/{{m.typeId}}">\r\n        {{m.typeName}}\r\n    </a>\r\n</td>\r\n\r\n<td class="aligned-left">\r\n    <a href="#/{{currYear}}/wms/project/{{m.projectId}}">\r\n        {{m.description}}\r\n    </a>\r\n</td>\r\n<td>{{m.sourceName}}</td>\r\n<td>\r\n    <% if (m.recipientEntityType != "WWP") { %>\r\n        <a href="#/{{currYear}}/wms/entity/{{m.recipientEntityId}}">    \r\n            {{m.recipientEntityName}}\r\n        </a>\r\n    <% } else { %>\r\n        {{m.recipientEntityName}}\r\n    <% } %>\r\n</td>\r\n<td>{{ $.number(m["supply"+currYear]) }}</td>\r\n<td>\r\n    <%  if (m.sponsorId == m.recipientEntityId) {\r\n            print(\'$\' + $.number(m.capitalCost));\r\n        } else {\r\n            print(\'---\');\r\n        }\r\n    %>\r\n</td>\r\n<td>{{m.sponsorName}}</td>\r\n';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/StrategyView',['namespace', 'views/BaseStrategyView', 'scripts/text!templates/strategyRow.html'], function(namespace, BaseStrategyView, tpl) {
  var StrategyView;
  return StrategyView = (function(_super) {

    __extends(StrategyView, _super);

    function StrategyView() {
      return StrategyView.__super__.constructor.apply(this, arguments);
    }

    StrategyView.prototype.template = tpl;

    return StrategyView;

  })(BaseStrategyView);
});

define('scripts/text!templates/strategyTable.html',[],function () { return '<h2>\r\n    Recommended Water Management Strategies in <span data-bind="text: viewName"></span> - <span data-bind="text: currYear"></span>\r\n</h2>\r\n<p>All supply amounts are in units of acre-feet/year.</p>\r\n\r\n<table class="table-hover table-striped table-bordered table-condensed modelTable">\r\n    <thead>\r\n        <tr>\r\n            <th>Type</th>\r\n            <th>\r\n                <span class="has-popover" data-content="Description of the recommended Water Management Strategy. Click to view project details.">\r\n                    Description\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Source supply of water for the Water Management Strategy">\r\n                    Source\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Water User Group (WUG) supplied by the Water Management Strategy. In the map, the circles for WUGs are sized based on their relative supply volume.">\r\n                    Entity <i class="wugIcon icon-circle"></i>\r\n                </span>\r\n            </th>\r\n            <th data-sort="formatted-int">\r\n                <span class="has-popover" data-content="Volume of water (in acre-feet/year) supplied by the Water Management Strategy">\r\n                    Supply Volume <span data-bind="text: currYear"></span>\r\n                </span>\r\n            </th>\r\n            <th data-sort="currency">\r\n                <span class="has-popover" data-content="Estimated capital cost of the Water Management Strategy">\r\n                    Capital Cost\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Sponsor of the Water Management Strategy">\r\n                    Sponsor Entity\r\n                </span>\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n\r\n    </tbody>\r\n</table>\r\n';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/RegionStrategyCollectionView',['namespace', 'views/BaseTableCollectionView', 'views/StrategyView', 'scripts/text!templates/strategyTable.html'], function(namespace, BaseTableCollectionView, StrategyView, tpl) {
  var RegionStrategyCollectionView;
  return RegionStrategyCollectionView = (function(_super) {

    __extends(RegionStrategyCollectionView, _super);

    function RegionStrategyCollectionView() {
      return RegionStrategyCollectionView.__super__.constructor.apply(this, arguments);
    }

    RegionStrategyCollectionView.prototype.initialize = function(options) {
      var StrategyCollection, fetchParams;
      this.regionLetter = options.id;
      this.viewName = ko.observable("Region " + this.regionLetter);
      fetchParams = {
        regionLetter: this.regionLetter
      };
      StrategyCollection = Backbone.Collection.extend({
        url: "" + BASE_API_PATH + "api/strategies/region"
      });
      RegionStrategyCollectionView.__super__.initialize.call(this, StrategyView, StrategyCollection, tpl, {
        fetchParams: fetchParams
      });
      return null;
    };

    return RegionStrategyCollectionView;

  })(BaseTableCollectionView);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/CountyStrategyCollectionView',['namespace', 'views/BaseTableCollectionView', 'views/StrategyView', 'scripts/text!templates/strategyTable.html'], function(namespace, BaseTableCollectionView, StrategyView, tpl) {
  var CountyStrategyCollectionView;
  return CountyStrategyCollectionView = (function(_super) {

    __extends(CountyStrategyCollectionView, _super);

    function CountyStrategyCollectionView() {
      return CountyStrategyCollectionView.__super__.constructor.apply(this, arguments);
    }

    CountyStrategyCollectionView.prototype.initialize = function(options) {
      var StrategyCollection, fetchParams;
      this.countyId = options.id;
      this.countyName = options.name;
      this.viewName = ko.observable("" + this.countyName + " County");
      fetchParams = {
        countyId: this.countyId
      };
      StrategyCollection = Backbone.Collection.extend({
        url: "" + BASE_API_PATH + "api/strategies/county"
      });
      CountyStrategyCollectionView.__super__.initialize.call(this, StrategyView, StrategyCollection, tpl, {
        fetchParams: fetchParams
      });
      return null;
    };

    return CountyStrategyCollectionView;

  })(BaseTableCollectionView);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/LegeDistrictCollectionView',['namespace', 'views/BaseTableCollectionView', 'views/StrategyView', 'scripts/text!templates/strategyTable.html'], function(namespace, BaseTableCollectionView, StrategyView, tpl) {
  var LegeDistrictCollectionView;
  return LegeDistrictCollectionView = (function(_super) {

    __extends(LegeDistrictCollectionView, _super);

    function LegeDistrictCollectionView() {
      return LegeDistrictCollectionView.__super__.constructor.apply(this, arguments);
    }

    LegeDistrictCollectionView.prototype.initialize = function(options) {
      var StrategyCollection, fetchParams;
      if (!(options.type != null) || !options.type === "house" || !options.type === "senate") {
        throw "Options.type myst be 'house' or 'senate'.";
      }
      this.districtType = options.type;
      this.districtId = options.id;
      this.districtName = options.name;
      this.viewName = ko.observable("" + this.districtName);
      fetchParams = {
        districtId: this.districtId
      };
      StrategyCollection = Backbone.Collection.extend({
        url: "" + BASE_API_PATH + "api/strategies/district/" + this.districtType
      });
      LegeDistrictCollectionView.__super__.initialize.call(this, StrategyView, StrategyCollection, tpl, {
        fetchParams: fetchParams
      });
      return null;
    };

    return LegeDistrictCollectionView;

  })(BaseTableCollectionView);
});

define('scripts/text!templates/strategyTypeRow.html',[],function () { return '\r\n<td>\r\n    <a href="#/{{currYear}}/wms/region/{{m.regionLetter}}">\r\n        {{m.regionLetter}}\r\n    </a>\r\n</td>\r\n\r\n<td class="aligned-left">\r\n    <a href="#/{{currYear}}/wms/project/{{m.projectId}}">\r\n        {{m.description}}\r\n    </a>\r\n</td>\r\n<td>{{m.sourceName}}</td>\r\n<td>\r\n    <% if (m.recipientEntityType != "WWP") { %>\r\n        <a href="#/{{currYear}}/wms/entity/{{m.recipientEntityId}}">    \r\n            {{m.recipientEntityName}}\r\n        </a>\r\n    <% } else { %>\r\n        {{m.recipientEntityName}}\r\n    <% } %>\r\n</td>\r\n<td>{{ $.number(m["supply"+currYear]) }}</td>\r\n<td>{{m.sponsorName}}</td>\r\n';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/StrategyTypeView',['namespace', 'views/BaseStrategyView', 'scripts/text!templates/strategyTypeRow.html'], function(namespace, BaseStrategyView, tpl) {
  var StrategyTypeView;
  return StrategyTypeView = (function(_super) {

    __extends(StrategyTypeView, _super);

    function StrategyTypeView() {
      return StrategyTypeView.__super__.constructor.apply(this, arguments);
    }

    StrategyTypeView.prototype.template = tpl;

    return StrategyTypeView;

  })(BaseStrategyView);
});

define('scripts/text!templates/strategyTypeTable.html',[],function () { return '<h2>\r\n   <span data-bind="text: viewName"></span> STRATEGIES - <span data-bind="text: currYear"></span>\r\n</h2>\r\n<p>All supply amounts are in units of acre-feet/year.</p>\r\n\r\n<table class="table-hover table-striped table-bordered table-condensed modelTable">\r\n    <thead>\r\n        <tr>\r\n            <th>\r\n                <span class="has-popover" data-content="State Water Plan Planning Region">\r\n                    Region\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Description of the recommended Water Management Strategy. Click to view project details.">\r\n                    Description\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Source supply of water for the Water Management Strategy">\r\n                    Source\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Water User Group supplied by the Water Management Strategy. In the map, the circles for WUGs are sized based on their relative supply volume.">\r\n                    Entity <i class="wugIcon icon-circle"></i>\r\n                </span>\r\n            </th>\r\n            <th data-sort="formatted-int">\r\n                <span class="has-popover" data-content="Volume of water (in acre-feet/year) supplied by the Water Management Strategy">\r\n                    Supply Volume <span data-bind="text: currYear"></span>\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Sponsor of the Water Management Strategy">\r\n                    Sponsor Entity\r\n                </span>\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n\r\n    </tbody>\r\n</table>\r\n';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/StrategyTypeCollectionView',['namespace', 'views/BaseTableCollectionView', 'views/StrategyTypeView', 'scripts/text!templates/strategyTypeTable.html'], function(namespace, BaseTableCollectionView, StrategyTypeView, tpl) {
  var StrategyTypeCollectionView;
  return StrategyTypeCollectionView = (function(_super) {

    __extends(StrategyTypeCollectionView, _super);

    function StrategyTypeCollectionView() {
      return StrategyTypeCollectionView.__super__.constructor.apply(this, arguments);
    }

    StrategyTypeCollectionView.prototype.initialize = function(options) {
      var StrategyCollection, fetchParams;
      this.typeId = options.id;
      this.typeName = options.name;
      this.viewName = ko.observable("" + this.typeName);
      fetchParams = {
        typeId: this.typeId
      };
      StrategyCollection = Backbone.Collection.extend({
        url: "" + BASE_API_PATH + "api/strategies/type"
      });
      StrategyTypeCollectionView.__super__.initialize.call(this, StrategyTypeView, StrategyCollection, tpl, {
        fetchParams: fetchParams
      });
      return null;
    };

    return StrategyTypeCollectionView;

  })(BaseTableCollectionView);
});

define('scripts/text!templates/entityStrategyRow.html',[],function () { return '\r\n<td>\r\n    <a href="#/{{currYear}}/wms/type/{{m.typeId}}">\r\n        {{m.typeName}}\r\n    </a>\r\n</td>\r\n\r\n<td class="aligned-left">\r\n    <a href="#/{{currYear}}/wms/project/{{m.projectId}}">\r\n        {{m.description}}\r\n    </a>\r\n</td>\r\n\r\n<td>{{m.sourceName}}</td>\r\n<td>{{ $.number(m["supply"+currYear]) }}</td>\r\n<td>\r\n    <%  if (m.sponsorId == m.recipientEntityId) {\r\n            print(\'$\' + $.number(m.capitalCost));\r\n        } else {\r\n            print(\'---\');\r\n        }\r\n    %>\r\n</td>\r\n<td>{{m.sponsorName}}</td>\r\n';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/EntityStrategyView',['namespace', 'views/BaseStrategyView', 'scripts/text!templates/entityStrategyRow.html'], function(namespace, BaseStrategyView, tpl) {
  var EntityStrategyView;
  return EntityStrategyView = (function(_super) {

    __extends(EntityStrategyView, _super);

    function EntityStrategyView() {
      return EntityStrategyView.__super__.constructor.apply(this, arguments);
    }

    EntityStrategyView.prototype.template = tpl;

    return EntityStrategyView;

  })(BaseStrategyView);
});

define('scripts/text!templates/entityStrategyTable.html',[],function () { return '<h2>\r\n    Recommended Water Management Strategies for \r\n    <span data-bind="text: viewName"></span> <i class="wugIcon icon-circle icon-large"></i> - \r\n    <span data-bind="text: currYear"></span>\r\n</h2>\r\n<p>All supply amounts are in units of acre-feet/year.</p>\r\n\r\n<table class="table-hover table-striped table-bordered table-condensed modelTable">\r\n    <thead>\r\n        <tr>\r\n            <th>\r\n                <span class="has-popover" data-content="Water Management Strategy Type">\r\n                    Type\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Description of the recommended Water Management Strategy. Click to view project details.">\r\n                    Description\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Source supply of water for the Water Management Strategy">\r\n                    Source\r\n                </span>\r\n            </th>\r\n            <th data-sort="formatted-int">\r\n                <span class="has-popover" data-content="Volume of water (in acre-feet/year) supplied by the Water Management Strategy">\r\n                    Supply Volume <span data-bind="text: currYear"></span>\r\n                </span>\r\n            </th>\r\n            <th data-sort="currency">\r\n                <span class="has-popover" data-content="Estimated capital cost of the Water Management Strategy">\r\n                    Capital Cost\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Sponsor of the Water Management Strategy">\r\n                    Sponsor Entity\r\n                </span>\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n\r\n    </tbody>\r\n</table>\r\n';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/EntityStrategyCollectionView',['namespace', 'views/BaseTableCollectionView', 'views/EntityStrategyView', 'scripts/text!templates/entityStrategyTable.html'], function(namespace, BaseTableCollectionView, EntityStrategyView, tpl) {
  var EntityStrategyCollectionView;
  return EntityStrategyCollectionView = (function(_super) {

    __extends(EntityStrategyCollectionView, _super);

    function EntityStrategyCollectionView() {
      return EntityStrategyCollectionView.__super__.constructor.apply(this, arguments);
    }

    EntityStrategyCollectionView.prototype.initialize = function(options) {
      var StrategyCollection, fetchParams;
      _.bindAll(this, 'fetchCallback');
      this.entityId = options.id;
      this.viewName = ko.observable();
      fetchParams = {
        entityId: this.entityId
      };
      StrategyCollection = Backbone.Collection.extend({
        url: "" + BASE_API_PATH + "api/strategies/entity"
      });
      EntityStrategyCollectionView.__super__.initialize.call(this, EntityStrategyView, StrategyCollection, tpl, {
        fetchParams: fetchParams
      });
      return null;
    };

    EntityStrategyCollectionView.prototype.fetchCallback = function(strategyModels) {
      var newWugList, wug;
      newWugList = [];
      wug = strategyModels[0];
      if (!(wug != null)) {
        alert("Invalid entityId specified.");
        Backbone.history.navigate("", {
          trigger: true
        });
      }
      this.viewName(wug.get("recipientEntityName"));
      newWugList.push({
        id: wug.get("recipientEntityId"),
        name: wug.get("recipientEntityName"),
        wktGeog: wug.get("recipientEntityWktGeog"),
        sourceSupply: wug.get("supply" + namespace.currYear),
        type: wug.get("recipientEntityType")
      });
      namespace.wugFeatureCollection.reset(newWugList);
    };

    return EntityStrategyCollectionView;

  })(BaseTableCollectionView);
});

define('scripts/text!templates/strategyDetailRow.html',[],function () { return '<td>\r\n    <a href="#/{{currYear}}/wms/region/{{m.regionLetter}}">\r\n        {{m.regionLetter}}\r\n    </a>\r\n</td>\r\n<td>\r\n    <a href="#/{{currYear}}/wms/type/{{m.typeId}}">\r\n        {{m.typeName}}\r\n    </a>\r\n</td>\r\n<td>{{m.sourceName}}</td>\r\n<td>\r\n    <% if (m.recipientEntityType != "WWP") { %>\r\n        <a href="#/{{currYear}}/wms/entity/{{m.recipientEntityId}}">    \r\n            {{m.recipientEntityName}}\r\n        </a>\r\n    <% } else { %>\r\n        {{m.recipientEntityName}}\r\n    <% } %>\r\n</td>\r\n<td>{{ $.number(m["supply"+currYear]) }}</td>\r\n<td>\r\n    <%  if (m.sponsorId == m.recipientEntityId) {\r\n            print(\'$\' + $.number(m.capitalCost));\r\n        } else {\r\n            print(\'---\');\r\n        }\r\n    %>\r\n</td>\r\n<td>{{m.sponsorName}}</td>\r\n';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/StrategyDetailView',['namespace', 'views/BaseStrategyView', 'scripts/text!templates/strategyDetailRow.html'], function(namespace, BaseStrategyView, tpl) {
  var StrategyDetailView;
  return StrategyDetailView = (function(_super) {

    __extends(StrategyDetailView, _super);

    function StrategyDetailView() {
      return StrategyDetailView.__super__.constructor.apply(this, arguments);
    }

    StrategyDetailView.prototype.template = tpl;

    return StrategyDetailView;

  })(BaseStrategyView);
});

define('scripts/text!templates/strategyDetailTable.html',[],function () { return '<h2>\r\n    <span data-bind="text: viewName"></span> - \r\n    <span data-bind="text: currYear"></span>\r\n</h2>\r\n<p>All supply amounts are in units of acre-feet/year.</p>\r\n\r\n<table class="table-hover table-striped table-bordered table-condensed modelTable">\r\n    <thead>\r\n        <tr>\r\n            <th>\r\n                <span class="has-popover" data-content="State Water Plan Planning Region">\r\n                    Region\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Water Management Strategy Type">\r\n                    Type\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Source supply of water for the Water Management Strategy">\r\n                    Source\r\n                </span>\r\n            </th>\r\n             <th>\r\n                <span class="has-popover" data-content="Water User Group (WUG) supplied by the Water Management Strategy. In the map, the circles for WUGs are sized based on their relative supply volume.">\r\n                    Entity <i class="wugIcon icon-circle"></i>\r\n                </span>\r\n            </th>\r\n            <th data-sort="formatted-int">\r\n                <span class="has-popover" data-content="Volume of water (in acre-feet/year) supplied by the Water Management Strategy">\r\n                    Supply Volume <span data-bind="text: currYear"></span>\r\n                </span>\r\n            </th>\r\n            <th data-sort="currency">\r\n                <span class="has-popover" data-content="Estimated capital cost of the Water Management Strategy">\r\n                    Capital Cost\r\n                </span>\r\n            </th>\r\n            <th>\r\n                <span class="has-popover" data-content="Sponsor of the Water Management Strategy">\r\n                    Sponsor Entity\r\n                </span>\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n\r\n    </tbody>\r\n</table>\r\n';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/StrategyDetailCollectionView',['namespace', 'views/BaseTableCollectionView', 'views/StrategyDetailView', 'scripts/text!templates/strategyDetailTable.html'], function(namespace, BaseTableCollectionView, StrategyDetailView, tpl) {
  var StrategyDetailCollectionView;
  return StrategyDetailCollectionView = (function(_super) {

    __extends(StrategyDetailCollectionView, _super);

    function StrategyDetailCollectionView() {
      return StrategyDetailCollectionView.__super__.constructor.apply(this, arguments);
    }

    StrategyDetailCollectionView.prototype.initialize = function(options) {
      var StrategyDetailCollection, fetchParams;
      _.bindAll(this, 'fetchCallback');
      this.projectId = options.id;
      this.viewName = ko.observable();
      fetchParams = {
        projectId: this.projectId
      };
      StrategyDetailCollection = Backbone.Collection.extend({
        url: "" + BASE_API_PATH + "api/strategies/project"
      });
      StrategyDetailCollectionView.__super__.initialize.call(this, StrategyDetailView, StrategyDetailCollection, tpl, {
        fetchParams: fetchParams
      });
      return null;
    };

    StrategyDetailCollectionView.prototype.fetchCallback = function(strategyModels) {
      if (strategyModels.length < (1 != null)) {
        alert("Invalid projectId specified.");
        Backbone.history.navigate("", {
          trigger: true
        });
      }
      this.viewName(strategyModels[0].get("description"));
      StrategyDetailCollectionView.__super__.fetchCallback.call(this, strategyModels);
    };

    return StrategyDetailCollectionView;

  })(BaseTableCollectionView);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/WmsAreaSelectView',['namespace'], function(namespace) {
  var WmsAreaSelectView;
  return WmsAreaSelectView = (function(_super) {

    __extends(WmsAreaSelectView, _super);

    function WmsAreaSelectView() {
      return WmsAreaSelectView.__super__.constructor.apply(this, arguments);
    }

    WmsAreaSelectView.prototype.initialize = function(options) {
      _.bindAll(this, 'render', 'unrender', '_createRegionSelect', '_createCountySelect', '_createHouseSelect', '_createSenateSelect', 'enableSelects', 'disableSelects', 'resetSelects');
      if (!(namespace.countyNames != null) || !(namespace.regionNames != null) || !(namespace.houseNames != null) || !(namespace.senateNames != null)) {
        throw "Must specify namespace.counties, namespace.regions, namespace.house,and namespace.senate";
      }
    };

    WmsAreaSelectView.prototype.render = function() {
      this.selects = {};
      this.selects["region"] = this._createRegionSelect().chosen();
      this.selects["county"] = this._createCountySelect().chosen();
      this.selects["house"] = this._createHouseSelect().chosen();
      this.selects["senate"] = this._createSenateSelect().chosen();
      return this;
    };

    WmsAreaSelectView.prototype.resetSelects = function(exceptName) {
      var select;
      for (select in this.selects) {
        if (select !== exceptName) {
          this.selects[select].val("-1").trigger("liszt:updated");
        }
      }
    };

    WmsAreaSelectView.prototype.disableSelects = function() {
      var select;
      for (select in this.selects) {
        this.selects[select].attr('disabled', true).trigger("liszt:updated");
      }
    };

    WmsAreaSelectView.prototype.enableSelects = function() {
      var select;
      for (select in this.selects) {
        this.selects[select].attr('disabled', null).trigger("liszt:updated");
      }
    };

    WmsAreaSelectView.prototype._createRegionSelect = function() {
      var $regionSelect, me, opt, region, _i, _len, _ref;
      $regionSelect = $("<select></select>");
      $regionSelect.append($("<option value='-1'>Select a Region</option>"));
      _ref = namespace.regionNames.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        region = _ref[_i];
        opt = $("<option value='" + (region.get("letter")) + "'>Region " + (region.get("letter")) + "</option>");
        $regionSelect.append(opt);
      }
      this.$("#regionSelectContainer").append($regionSelect);
      me = this;
      $regionSelect.on("change", function() {
        var $this;
        $this = $(this);
        if ($this.val() === "-1") {
          return;
        }
        Backbone.history.navigate("#/" + namespace.currYear + "/wms/region/" + ($this.val()), {
          trigger: true
        });
        me.resetSelects("region");
      });
      return $regionSelect;
    };

    WmsAreaSelectView.prototype._createCountySelect = function() {
      var $countySelect, county, me, opt, _i, _len, _ref;
      $countySelect = $("<select></select>");
      $countySelect.append($("<option value='-1'>Select a County</option>"));
      _ref = namespace.countyNames.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        county = _ref[_i];
        opt = $("<option value='" + (county.get("id")) + "'>" + (county.get("name")) + "</option>");
        $countySelect.append(opt);
      }
      this.$("#countySelectContainer").append($countySelect);
      me = this;
      $countySelect.on("change", function() {
        var $this;
        $this = $(this);
        if ($this.val() === "-1") {
          return;
        }
        Backbone.history.navigate("#/" + namespace.currYear + "/wms/county/" + ($this.val()), {
          trigger: true
        });
        me.resetSelects("county");
      });
      return $countySelect;
    };

    WmsAreaSelectView.prototype._createHouseSelect = function() {
      var $houseSelect, district, me, opt, _i, _len, _ref;
      $houseSelect = $("<select></select>");
      $houseSelect.append($("<option value='-1'>Select a State House District</option>"));
      _ref = namespace.houseNames.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        district = _ref[_i];
        opt = $("<option value='" + (district.get("id")) + "'>" + (district.get("name")) + "</option>");
        $houseSelect.append(opt);
      }
      this.$("#houseSelectContainer").append($houseSelect);
      me = this;
      $houseSelect.on("change", function() {
        var $this;
        $this = $(this);
        if ($this.val() === "-1") {
          return;
        }
        Backbone.history.navigate("#/" + namespace.currYear + "/wms/house/" + ($this.val()), {
          trigger: true
        });
        me.resetSelects("house");
      });
      return $houseSelect;
    };

    WmsAreaSelectView.prototype._createSenateSelect = function() {
      var $houseSelect, district, me, opt, _i, _len, _ref;
      $houseSelect = $("<select></select>");
      $houseSelect.append($("<option value='-1'>Select a State Senate District</option>"));
      _ref = namespace.senateNames.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        district = _ref[_i];
        opt = $("<option value='" + (district.get("id")) + "'>" + (district.get("name")) + "</option>");
        $houseSelect.append(opt);
      }
      this.$("#senateSelectContainer").append($houseSelect);
      me = this;
      $houseSelect.on("change", function() {
        var $this;
        $this = $(this);
        if ($this.val() === "-1") {
          return;
        }
        Backbone.history.navigate("#/" + namespace.currYear + "/wms/senate/" + ($this.val()), {
          trigger: true
        });
        me.resetSelects("senate");
      });
      return $houseSelect;
    };

    WmsAreaSelectView.prototype.unrender = function() {
      this.$el.remove();
      return null;
    };

    return WmsAreaSelectView;

  })(Backbone.View);
});

define('scripts/text!templates/mapTopButtons.html',[],function () { return '<div class="pull-right">\r\n    <a class="btn map-stuff" data-bind="click: zoomToTexas">\r\n        Zoom to Texas\r\n    </a>\r\n    \r\n    <a class="btn" id="toggleMapBtn" data-bind="click: toggleMap">\r\n        Hide Map\r\n    </a>\r\n</div>';});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('views/MapTopButtonsView',['scripts/text!templates/mapTopButtons.html'], function(tpl) {
  var MapTopButtonsView;
  return MapTopButtonsView = (function(_super) {

    __extends(MapTopButtonsView, _super);

    function MapTopButtonsView() {
      return MapTopButtonsView.__super__.constructor.apply(this, arguments);
    }

    MapTopButtonsView.prototype.template = _.template(tpl);

    MapTopButtonsView.prototype.initialize = function(options) {
      _.bindAll(this, 'render', 'unrender', 'zoomToTexas', 'toggleMap');
      if (!(options.mapView != null)) {
        throw "options.mapView not defined";
      }
      this.mapView = options.mapView;
      return null;
    };

    MapTopButtonsView.prototype.render = function() {
      this.$el.empty();
      this.$el.html(this.template());
      ko.applyBindings(this, this.el);
      return this;
    };

    MapTopButtonsView.prototype.unrender = function() {
      this.$el.remove();
      return null;
    };

    MapTopButtonsView.prototype.zoomToTexas = function() {
      this.mapView.resetExtent();
    };

    MapTopButtonsView.prototype.toggleMap = function(data, event) {
      var $target;
      $target = $(event.target);
      if ($target.hasClass('off')) {
        $target.html('Hide Map');
        $('#mapContainer').slideDown();
        $('.map-stuff').show();
        $target.removeClass('off');
      } else {
        $target.addClass('off');
        $('#mapContainer').slideUp();
        $('.map-stuff').hide();
        $target.html('Show Map');
      }
    };

    return MapTopButtonsView;

  })(Backbone.View);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('collections/CountyCollection',[], function() {
  var CountyCollection;
  return CountyCollection = (function(_super) {

    __extends(CountyCollection, _super);

    function CountyCollection() {
      return CountyCollection.__super__.constructor.apply(this, arguments);
    }

    CountyCollection.prototype.url = "" + BASE_API_PATH + "api/boundary/counties/names";

    return CountyCollection;

  })(Backbone.Collection);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('collections/RegionCollection',[], function() {
  var RegionCollection;
  return RegionCollection = (function(_super) {

    __extends(RegionCollection, _super);

    function RegionCollection() {
      return RegionCollection.__super__.constructor.apply(this, arguments);
    }

    RegionCollection.prototype.url = "" + BASE_API_PATH + "api/boundary/regions/names";

    RegionCollection.prototype.model = Backbone.Model.extend({
      idAttribute: 'letter'
    });

    return RegionCollection;

  })(Backbone.Collection);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('collections/HouseCollection',[], function() {
  var HouseCollection;
  return HouseCollection = (function(_super) {

    __extends(HouseCollection, _super);

    function HouseCollection() {
      return HouseCollection.__super__.constructor.apply(this, arguments);
    }

    HouseCollection.prototype.url = "" + BASE_API_PATH + "api/boundary/districts/house/names";

    return HouseCollection;

  })(Backbone.Collection);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('collections/SenateCollection',[], function() {
  var SenateCollection;
  return SenateCollection = (function(_super) {

    __extends(SenateCollection, _super);

    function SenateCollection() {
      return SenateCollection.__super__.constructor.apply(this, arguments);
    }

    SenateCollection.prototype.url = "" + BASE_API_PATH + "api/boundary/districts/senate/names";

    return SenateCollection;

  })(Backbone.Collection);
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('WMSRouter',['namespace', 'views/MapView', 'views/ThemeNavToolbarView', 'views/YearNavView', 'views/MapBottomToolbarView', 'views/CountyNetSupplyCollectionView', 'views/RegionStrategyCollectionView', 'views/CountyStrategyCollectionView', 'views/LegeDistrictCollectionView', 'views/StrategyTypeCollectionView', 'views/EntityStrategyCollectionView', 'views/StrategyDetailCollectionView', 'views/WmsAreaSelectView', 'views/MapTopButtonsView', 'collections/StrategyTypeCollection', 'collections/CountyCollection', 'collections/RegionCollection', 'collections/HouseCollection', 'collections/SenateCollection'], function(namespace, MapView, ThemeNavToolbarView, YearNavView, MapBottomToolbarView, CountyNetSupplyCollectionView, RegionStrategyCollectionView, CountyStrategyCollectionView, LegeDistrictCollectionView, StrategyTypeCollectionView, EntityStrategyCollectionView, StrategyDetailCollectionView, WmsAreaSelectView, MapTopButtonsView, StrategyTypeCollection, CountyCollection, RegionCollection, HouseCollection, SenateCollection) {
  var WMSRouter;
  return WMSRouter = (function(_super) {

    __extends(WMSRouter, _super);

    function WMSRouter() {
      return WMSRouter.__super__.constructor.apply(this, arguments);
    }

    WMSRouter.prototype.initialize = function(options) {
      _.bindAll(this, 'updateViewsToNewYear', 'updateSelectedWug', 'onTableStartLoad', 'onTableEndLoad', 'onTableNothingFound', 'onTableFetchError');
      this.currTableView = null;
      this.tableContainer = $('#tableContainer')[0];
      this.mapView = new MapView({
        mapContainerId: 'mapContainer',
        bingApiKey: $('#bing_maps_key').val()
      });
      this.mapView.render();
      this.mapBottomToolbarView = new MapBottomToolbarView({
        el: $('#mapBottomToolsContainer')[0],
        mapView: this.mapView
      });
      this.mapBottomToolbarView.render();
      this.themeNavToolbarView = new ThemeNavToolbarView({
        el: $('#themeNavContainer')[0]
      });
      this.mapTopButtonsView = new MapTopButtonsView({
        el: $('#mapTopButtonsContainer')[0],
        mapView: this.mapView
      });
      this.mapTopButtonsView.render();
      this.yearNavView = new YearNavView({
        el: $('#yearNavContainer')[0]
      });
      namespace.strategyTypes = new StrategyTypeCollection();
      namespace.strategyTypes.reset(initStrategyTypes);
      namespace.countyNames = new CountyCollection();
      namespace.countyNames.reset(initCountyNames);
      namespace.regionNames = new RegionCollection();
      namespace.regionNames.reset(initRegionNames);
      namespace.houseNames = new HouseCollection();
      namespace.houseNames.reset(initHouseNames);
      namespace.senateNames = new SenateCollection();
      namespace.senateNames.reset(initSenateNames);
      this.areaSelectView = new WmsAreaSelectView({
        el: $('#areaSelectContainer')[0]
      });
      this.areaSelectView.render();
    };

    WMSRouter.prototype.updateViewsToNewYear = function(newYear) {
      var currRoute, newRoute, oldYear, y, _i, _len, _ref;
      currRoute = Backbone.history.fragment;
      oldYear = "";
      _ref = namespace.VALID_YEARS;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        y = _ref[_i];
        if (currRoute.indexOf(y + "/") !== -1) {
          oldYear = y;
          break;
        }
      }
      if (oldYear === "") {
        Backbone.history.navigate("");
      }
      newRoute = currRoute.replace(oldYear, newYear);
      Backbone.history.navigate("#/" + newRoute, {
        trigger: true
      });
    };

    WMSRouter.prototype.updateSelectedWug = function(wugId) {
      if (!wugId) {
        this.mapView.unselectWugFeatures();
      } else {
        this.mapView.selectWugFeature(wugId);
      }
    };

    WMSRouter.prototype.routes = {
      "": "default",
      ":year/wms": "wmsNetCountySupplies",
      ":year/wms/region/:regionLetter": "wmsRegion",
      ":year/wms/county/:countyId": "wmsCounty",
      ":year/wms/house/:districtId": "wmsHouseDistrict",
      ":year/wms/senate/:districtId": "wmsSenateDistrict",
      ":year/wms/type/:typeId": "wmsType",
      ":year/wms/entity/:entityId": "wmsEntity",
      ":year/wms/project/:projectId": "wmsProjectDetail"
    };

    WMSRouter.prototype.onTableStartLoad = function() {
      this.areaSelectView.disableSelects();
      this.yearNavView.disableYearButtons();
      this.themeNavToolbarView.disableStrategyTypeList();
      this.mapView.showMapLoading();
      this.currTableView.showLoading();
    };

    WMSRouter.prototype.onTableEndLoad = function() {
      this.areaSelectView.enableSelects();
      this.yearNavView.enableYearButtons();
      this.themeNavToolbarView.enableStrategyTypeList();
      this.mapView.hideMapLoading();
      this.currTableView.hideLoading();
    };

    WMSRouter.prototype.onTableFetchError = function() {
      alert("An error has occured.");
      Backbone.history.navigate("", {
        trigger: true
      });
    };

    WMSRouter.prototype.onTableNothingFound = function() {
      this.onTableEndLoad();
      this.currTableView.showNothingFound();
    };

    WMSRouter.prototype.before = {
      '': function(year) {
        if (this.currTableView != null) {
          this.currTableView = this.currTableView.unrender();
        }
        if (year != null) {
          if (_.contains(namespace.VALID_YEARS, year)) {
            namespace.currYear = year;
          } else {
            alert("Invalid decade specified.");
            Backbone.history.navigate("", {
              trigger: true
            });
            return false;
          }
        }
      }
    };

    WMSRouter.prototype.after = {
      '': function(year) {
        if ((year != null) && (this.currTableView != null)) {
          this.yearNavView.render();
          this.themeNavToolbarView.render();
          this.currTableView.on("table:startload", this.onTableStartLoad);
          this.currTableView.on("table:endload", this.onTableEndLoad);
          this.currTableView.on("table:nothingfound", this.onTableNothingFound);
          this.currTableView.on("table:fetcherror", this.onTableFetchError);
          this.currTableView.render();
          this.currTableView.selectedWug.subscribe(this.updateSelectedWug);
          this.yearNavView.currentYear.subscribe(this.updateViewsToNewYear);
        }
      }
    };

    WMSRouter.prototype["default"] = function() {
      Backbone.history.navigate("#/" + namespace.currYear + "/wms", {
        trigger: true
      });
    };

    WMSRouter.prototype.wmsNetCountySupplies = function(year) {
      if (this.currTableView != null) {
        this.currTableView = this.currTableView.unrender();
      }
      this.currTableView = new CountyNetSupplyCollectionView({
        el: this.tableContainer
      });
      this.mapView.resetExtent();
      this.mapView.clearWugFeatures();
      this.mapView.hideWmsOverlays();
      this.mapView.showWmsOverlayByViewType("Regions");
      this.areaSelectView.resetSelects();
    };

    WMSRouter.prototype.wmsRegion = function(year, regionLetter) {
      var region;
      region = namespace.regionNames.get(regionLetter);
      if (!(region != null)) {
        alert("Invalid region specified.");
        Backbone.history.navigate("", {
          trigger: true
        });
        return;
      }
      this.currTableView = new RegionStrategyCollectionView({
        el: this.tableContainer,
        id: regionLetter,
        name: regionLetter
      });
      this.mapView.hideWmsOverlays();
      this.mapView.showWmsOverlayByViewType("Regions");
    };

    WMSRouter.prototype.wmsCounty = function(year, countyId) {
      var county, countyName;
      county = namespace.countyNames.get(countyId);
      if (!(county != null)) {
        alert("Invalid countyId specified.");
        Backbone.history.navigate("", {
          trigger: true
        });
        return;
      }
      countyName = county.get('name');
      this.currTableView = new CountyStrategyCollectionView({
        el: this.tableContainer,
        id: countyId,
        name: countyName
      });
      this.mapView.hideWmsOverlays();
      this.mapView.showWmsOverlayByViewType("Counties");
    };

    WMSRouter.prototype.wmsHouseDistrict = function(year, districtId) {
      var district;
      district = namespace.houseNames.get(districtId);
      if (!(district != null)) {
        alert("Invalid districtId specified.");
        Backbone.history.navigate("", {
          trigger: true
        });
        return;
      }
      this.currTableView = new LegeDistrictCollectionView({
        el: this.tableContainer,
        id: districtId,
        type: "house",
        name: district.get("name")
      });
      this.mapView.hideWmsOverlays();
      this.mapView.showWmsOverlayByViewType("HouseDistricts");
    };

    WMSRouter.prototype.wmsSenateDistrict = function(year, districtId) {
      var district;
      district = namespace.senateNames.get(districtId);
      if (!(district != null)) {
        alert("Invalid districtId specified.");
        Backbone.history.navigate("", {
          trigger: true
        });
        return;
      }
      this.currTableView = new LegeDistrictCollectionView({
        el: this.tableContainer,
        id: districtId,
        type: "senate",
        name: district.get("name")
      });
      this.mapView.hideWmsOverlays();
      this.mapView.showWmsOverlayByViewType("SenateDistricts");
    };

    WMSRouter.prototype.wmsType = function(year, typeId) {
      var typeName, wmsType;
      wmsType = namespace.strategyTypes.get(typeId);
      if (!(wmsType != null)) {
        alert("Invalid typeId specified.");
        Backbone.history.navigate("", {
          trigger: true
        });
        return;
      }
      typeName = wmsType.get('name');
      this.currTableView = new StrategyTypeCollectionView({
        el: this.tableContainer,
        id: typeId,
        name: typeName
      });
      this.areaSelectView.resetSelects();
    };

    WMSRouter.prototype.wmsEntity = function(year, entityId) {
      this.currTableView = new EntityStrategyCollectionView({
        el: this.tableContainer,
        id: entityId
      });
      this.areaSelectView.resetSelects();
    };

    WMSRouter.prototype.wmsProjectDetail = function(year, projectId) {
      this.currTableView = new StrategyDetailCollectionView({
        el: this.tableContainer,
        id: projectId
      });
      this.areaSelectView.resetSelects();
    };

    return WMSRouter;

  })(Backbone.Router);
});

// Generated by CoffeeScript 1.3.3
var BASE_API_PATH, console;

console = console || {};

console.log = console.log || function() {
  return null;
};

_.extend(_.templateSettings, {
  interpolate: /\{\{(.+?)\}\}/g
});

BASE_API_PATH = "/";

$(function() {
  var _this = this;
  BASE_API_PATH = $("#base_path").val();
  require.config({
    baseUrl: "" + BASE_API_PATH + "Scripts/Compiled/backbone_app",
    paths: {
      "scripts": "../..",
      "templates": "../../templates"
    }
  });
  require(['WMSRouter'], function(WMSRouter) {
    var r;
    r = new WMSRouter();
    Backbone.history.start();
  });
});

define("main.js", function(){});
