// Generated by CoffeeScript 1.3.3
/*
The MapComponent holds the OpenLayers map.
*/

Ext.define('ISWP.view.map.MapComponent', {
  extend: 'Ext.Component',
  alias: 'widget.mapcomponent',
  map: null,
  placeLayer: null,
  bingApiKey: 'AkcIEknNDXOC-auGjTFai2j6vXuUeC6vT2-i7_JusAghlLEOwoM1gVC0vz1AcS5o',
  origCenter: new OpenLayers.LonLat(-99.294317, 31.348335).transform(new OpenLayers.Projection("EPSG:4326"), new OpenLayers.Projection("EPSG:3857")),
  origZoom: 6,
  handleMapEvent: function(evt) {
    return null;
  },
  initializeMap: function() {
    var bing_aerial, bing_hybrid, bing_road, esri_gray, mapquest_aerial, mapquest_open, toner, watercolor;
    mapquest_open = new OpenLayers.Layer.XYZ("MapQuest Open Street", ["http://otile1.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png", "http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png", "http://otile3.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png", "http://otile4.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png"], {
      attribution: "Tiles courtesy <a href='http://www.mapquest.com/' target='_blank'>MapQuest</a>",
      transitionEffect: "resize"
    });
    mapquest_aerial = new OpenLayers.Layer.XYZ("MapQuest Open Aerial", ["http://oatile1.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png", "http://oatile2.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png", "http://oatile3.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png", "http://oatile4.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png"], {
      attribution: "Tiles courtesy <a href='http://www.mapquest.com/' target='_blank'>MapQuest</a>",
      transitionEffect: "resize"
    });
    bing_road = new OpenLayers.Layer.Bing({
      name: "Bing Road",
      key: this.bingApiKey,
      type: "Road",
      transitionEffect: "resize"
    });
    bing_hybrid = new OpenLayers.Layer.Bing({
      name: "Bing Hybrid",
      key: this.bingApiKey,
      type: "AerialWithLabels",
      transitionEffect: "resize"
    });
    bing_aerial = new OpenLayers.Layer.Bing({
      name: "Bing Aerial",
      key: this.bingApiKey,
      type: "Aerial",
      transitionEffect: "resize"
    });
    esri_gray = new OpenLayers.Layer.XYZ('ESRI Gray', ['http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/${z}/${y}/${x}'], {
      attribution: "Tiles courtesy <a href='http://www.esri.com' target='_blank'>esri</a>"
    });
    toner = new OpenLayers.Layer.Stamen("toner-lite", "Stamen Toner");
    watercolor = new OpenLayers.Layer.Stamen("watercolor", "Stamen Watercolor");
    this.map = new OpenLayers.Map({
      div: this.id,
      projection: new OpenLayers.Projection("EPSG:3857"),
      displayProjection: new OpenLayers.Projection("EPSG:4326"),
      layers: [esri_gray, toner, watercolor, bing_road, mapquest_open, mapquest_aerial, bing_hybrid, bing_aerial],
      center: this.origCenter,
      zoom: this.origZoom,
      eventListeners: {
        zoomend: this.handleMapEvent
      }
    });
    this.placeLayer = this.placeLayer = new OpenLayers.Layer.Vector("Place Layer", {
      displayInLayerSwitcher: false
    });
    this.map.addLayer(this.placeLayer);
    this.map.addControl(new OpenLayers.Control.LayerSwitcher());
    return this.map;
  },
  zoomToExtent: function(extent) {
    this.map.zoomToExtent(extent);
    return null;
  },
  resetExtent: function() {
    this.map.setCenter(this.origCenter, this.origZoom);
    return null;
  },
  transformToWebMerc: function(geometry) {
    return geometry.transform(this.map.displayProjection, this.map.projection);
  },
  removePopupsFromMap: function() {
    var p, _i, _len, _ref;
    _ref = this.map.popups;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      this.map.removePopup(p);
    }
    return null;
  },
  removeLayersFromMap: function(layers) {
    var layer, map_lyr, _i, _j, _len, _len1, _ref;
    for (_i = 0, _len = layers.length; _i < _len; _i++) {
      layer = layers[_i];
      _ref = this.map.getLayersByName(layer.Name);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        map_lyr = _ref[_j];
        this.map.removeLayer(map_lyr);
        map_lyr.destroy();
      }
    }
    return null;
  },
  addLayersToMap: function(layers) {
    this.map.addLayers(layers);
    return null;
  },
  setPlaceFeature: function(placeName, placeFeature) {
    this.clearPlaceFeature();
    this.placeLayer.addFeatures(placeFeature);
    return null;
  },
  clearPlaceFeature: function() {
    this.placeLayer.removeAllFeatures();
    return null;
  }
});
