// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['namespace'], function(namespace) {
  var WmsAreaSelectView;
  return WmsAreaSelectView = (function(_super) {

    __extends(WmsAreaSelectView, _super);

    function WmsAreaSelectView() {
      return WmsAreaSelectView.__super__.constructor.apply(this, arguments);
    }

    WmsAreaSelectView.prototype.initialize = function(options) {
      _.bindAll(this, 'render', 'unrender', '_createRegionSelect', '_createCountySelect', '_createHouseSelect', '_createSenateSelect', 'enableSelects', 'disableSelects', 'resetSelects');
      if (!(namespace.countyNames != null) || !(namespace.regionNames != null) || !(namespace.houseNames != null) || !(namespace.senateNames != null)) {
        throw "Must specify namespace.counties, namespace.regions, namespace.house,and namespace.senate";
      }
    };

    WmsAreaSelectView.prototype.render = function() {
      this.selects = {};
      this.selects["region"] = this._createRegionSelect().chosen();
      this.selects["county"] = this._createCountySelect().chosen();
      this.selects["house"] = this._createHouseSelect().chosen();
      this.selects["senate"] = this._createSenateSelect().chosen();
      return this;
    };

    WmsAreaSelectView.prototype.resetSelects = function(exceptName) {
      var select;
      for (select in this.selects) {
        if (select !== exceptName) {
          this.selects[select].val("-1").trigger("liszt:updated");
        }
      }
    };

    WmsAreaSelectView.prototype.disableSelects = function() {
      var select;
      for (select in this.selects) {
        this.selects[select].attr('disabled', true).trigger("liszt:updated");
      }
    };

    WmsAreaSelectView.prototype.enableSelects = function() {
      var select;
      for (select in this.selects) {
        this.selects[select].attr('disabled', null).trigger("liszt:updated");
      }
    };

    WmsAreaSelectView.prototype._createRegionSelect = function() {
      var $regionSelect, me, opt, region, _i, _len, _ref;
      $regionSelect = $("<select></select>");
      $regionSelect.append($("<option value='-1'>Select a Region</option>"));
      _ref = namespace.regionNames.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        region = _ref[_i];
        opt = $("<option value='" + (region.get("letter")) + "'>Region " + (region.get("letter")) + "</option>");
        $regionSelect.append(opt);
      }
      this.$("#regionSelectContainer").append($regionSelect);
      me = this;
      $regionSelect.on("change", function() {
        var $this;
        $this = $(this);
        if ($this.val() === "-1") {
          return;
        }
        Backbone.history.navigate("#/" + namespace.currYear + "/wms/region/" + ($this.val()), {
          trigger: true
        });
        me.resetSelects("region");
      });
      return $regionSelect;
    };

    WmsAreaSelectView.prototype._createCountySelect = function() {
      var $countySelect, county, me, opt, _i, _len, _ref;
      $countySelect = $("<select></select>");
      $countySelect.append($("<option value='-1'>Select a County</option>"));
      _ref = namespace.countyNames.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        county = _ref[_i];
        opt = $("<option value='" + (county.get("id")) + "'>" + (county.get("name")) + "</option>");
        $countySelect.append(opt);
      }
      this.$("#countySelectContainer").append($countySelect);
      me = this;
      $countySelect.on("change", function() {
        var $this;
        $this = $(this);
        if ($this.val() === "-1") {
          return;
        }
        Backbone.history.navigate("#/" + namespace.currYear + "/wms/county/" + ($this.val()), {
          trigger: true
        });
        me.resetSelects("county");
      });
      return $countySelect;
    };

    WmsAreaSelectView.prototype._createHouseSelect = function() {
      var $houseSelect, district, me, opt, _i, _len, _ref;
      $houseSelect = $("<select></select>");
      $houseSelect.append($("<option value='-1'>Select a State House District</option>"));
      _ref = namespace.houseNames.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        district = _ref[_i];
        opt = $("<option value='" + (district.get("id")) + "'>" + (district.get("name")) + "</option>");
        $houseSelect.append(opt);
      }
      this.$("#houseSelectContainer").append($houseSelect);
      me = this;
      $houseSelect.on("change", function() {
        var $this;
        $this = $(this);
        if ($this.val() === "-1") {
          return;
        }
        Backbone.history.navigate("#/" + namespace.currYear + "/wms/house/" + ($this.val()), {
          trigger: true
        });
        me.resetSelects("house");
      });
      return $houseSelect;
    };

    WmsAreaSelectView.prototype._createSenateSelect = function() {
      var $houseSelect, district, me, opt, _i, _len, _ref;
      $houseSelect = $("<select></select>");
      $houseSelect.append($("<option value='-1'>Select a State Senate District</option>"));
      _ref = namespace.senateNames.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        district = _ref[_i];
        opt = $("<option value='" + (district.get("id")) + "'>" + (district.get("name")) + "</option>");
        $houseSelect.append(opt);
      }
      this.$("#senateSelectContainer").append($houseSelect);
      me = this;
      $houseSelect.on("change", function() {
        var $this;
        $this = $(this);
        if ($this.val() === "-1") {
          return;
        }
        Backbone.history.navigate("#/" + namespace.currYear + "/wms/senate/" + ($this.val()), {
          trigger: true
        });
        me.resetSelects("senate");
      });
      return $houseSelect;
    };

    WmsAreaSelectView.prototype.unrender = function() {
      this.$el.remove();
      return null;
    };

    return WmsAreaSelectView;

  })(Backbone.View);
});
