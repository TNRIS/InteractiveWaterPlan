// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['namespace', 'views/BaseStrategyCollectionView', 'views/ProjectStrategyView', 'scripts/text!templates/projectStrategyTable.html'], function(namespace, BaseStrategyCollectionView, ProjectStrategyView, tpl) {
  var ProjectStrategyCollectionView, _ref;

  return ProjectStrategyCollectionView = (function(_super) {
    __extends(ProjectStrategyCollectionView, _super);

    function ProjectStrategyCollectionView() {
      _ref = ProjectStrategyCollectionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ProjectStrategyCollectionView.prototype.initialize = function(options) {
      var ProjectStrategyCollection, fetchParams;

      _.bindAll(this, 'fetchCallback');
      this.projectId = options.id;
      this.viewName = ko.observable();
      fetchParams = {
        projectId: this.projectId
      };
      ProjectStrategyCollection = Backbone.Collection.extend({
        url: "" + BASE_PATH + "api/strategies/project"
      });
      ProjectStrategyCollectionView.__super__.initialize.call(this, ProjectStrategyView, ProjectStrategyCollection, tpl, {
        fetchParams: fetchParams
      });
      return null;
    };

    ProjectStrategyCollectionView.prototype.fetchCallback = function(strategyModels) {
      if (strategyModels.length < (1 != null)) {
        alert("Invalid projectId specified.");
        Backbone.history.navigate("", {
          trigger: true
        });
      }
      this.viewName(strategyModels[0].get("description"));
      ProjectStrategyCollectionView.__super__.fetchCallback.call(this, strategyModels);
    };

    return ProjectStrategyCollectionView;

  })(BaseStrategyCollectionView);
});
