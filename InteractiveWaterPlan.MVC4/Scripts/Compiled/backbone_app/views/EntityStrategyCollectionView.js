// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['views/BaseTableCollectionView', 'views/EntityStrategyView', 'scripts/text!templates/entityStrategyTable.html'], function(BaseTableCollectionView, EntityStrategyView, tpl) {
  var EntityStrategyCollectionView;
  return EntityStrategyCollectionView = (function(_super) {

    __extends(EntityStrategyCollectionView, _super);

    function EntityStrategyCollectionView() {
      return EntityStrategyCollectionView.__super__.constructor.apply(this, arguments);
    }

    EntityStrategyCollectionView.prototype.initialize = function(options) {
      var EntityModel, StrategyCollection, entity, fetchParams,
        _this = this;
      _.bindAll(this);
      this.entityId = options.id;
      this.viewName = ko.observable();
      fetchParams = {
        entityId: this.entityId
      };
      StrategyCollection = Backbone.Collection.extend({
        url: "" + BASE_API_PATH + "api/strategies/entity"
      });
      EntityStrategyCollectionView.__super__.initialize.call(this, EntityStrategyView, StrategyCollection, tpl, {
        fetchParams: fetchParams
      });
      EntityModel = Backbone.Model.extend({
        url: "" + BASE_API_PATH + "api/entity/" + this.entityId
      });
      entity = new EntityModel();
      entity.fetch({
        success: function(model) {
          _this.viewName(model.get("name"));
        }
      });
      return null;
    };

    EntityStrategyCollectionView.prototype.render = function() {
      EntityStrategyCollectionView.__super__.render.apply(this, arguments);
      return this;
    };

    return EntityStrategyCollectionView;

  })(BaseTableCollectionView);
});
