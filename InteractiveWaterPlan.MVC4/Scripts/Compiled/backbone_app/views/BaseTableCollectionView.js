// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['namespace'], function(namespace) {
  var BaseTableCollectionView;
  return BaseTableCollectionView = (function(_super) {

    __extends(BaseTableCollectionView, _super);

    function BaseTableCollectionView() {
      return BaseTableCollectionView.__super__.constructor.apply(this, arguments);
    }

    BaseTableCollectionView.prototype.initialize = function(ModelView, Collection, tpl, options) {
      _.bindAll(this, 'render', 'unrender', 'fetchCollection', 'appendModel', 'hideLoading', 'showLoading', 'fetchCallback', '_setupDataTable', '_connectTableRowsToWugFeatures', 'showNothingFound', 'hideNothingFound');
      options = options || {};
      this.fetchParams = options.fetchParams || {};
      this.currYear = ko.observable(namespace.currYear);
      this.template = _.template(tpl);
      this.collection = new Collection();
      this.ModelView = ModelView;
      return null;
    };

    BaseTableCollectionView.prototype.render = function() {
      this.$el.html(this.template());
      this.fetchCollection();
      ko.applyBindings(this, this.el);
      this.$('.has-popover').popover({
        trigger: 'hover',
        placement: 'top'
      });
      return this;
    };

    BaseTableCollectionView.prototype.unrender = function() {
      this.$el.html();
      return null;
    };

    BaseTableCollectionView.prototype.fetchCollection = function() {
      var params,
        _this = this;
      this.$('tbody').empty();
      params = _.extend({
        year: namespace.currYear
      }, this.fetchParams);
      this.trigger("table:startload");
      this.collection.fetch({
        data: params,
        success: function(collection) {
          var m, _i, _len, _ref;
          if (collection.models.length === 0) {
            _this.trigger("table:nothingfound");
          } else {
            _ref = collection.models;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              m = _ref[_i];
              _this.appendModel(m);
            }
            _this.$('.has-popover').popover({
              trigger: 'hover'
            });
            _this._setupDataTable();
            _this._connectTableRowsToWugFeatures();
            if ((_this.fetchCallback != null) && _.isFunction(_this.fetchCallback)) {
              _this.fetchCallback(collection.models);
            }
            _this.trigger("table:endload");
          }
        },
        error: function() {
          _this.trigger("table:fetcherror");
        }
      });
    };

    BaseTableCollectionView.prototype.fetchCallback = function(strategyModels) {
      var groupedById, newWugList;
      groupedById = _.groupBy(strategyModels, function(m) {
        return m.get("recipientEntityId");
      });
      newWugList = _.map(groupedById, function(group) {
        var entity;
        entity = _.reduce(group, function(memo, m) {
          memo.entityId = m.get("recipientEntityId");
          memo.name = m.get("recipientEntityName");
          memo.wktGeog = m.get("recipientEntityWktGeog");
          memo.type = m.get("recipientEntityType");
          memo.strategyTypes.push(m.get("typeId"));
          memo.totalSupply += m.get("supply" + namespace.currYear);
          return memo;
        }, {
          totalSupply: 0,
          strategyTypes: []
        });
        entity.strategyTypes = _.uniq(entity.strategyTypes);
        return entity;
      });
      newWugList.sort(function(a, b) {
        if (a.type === "WWP") {
          return -1;
        }
        if (b.type === "WWP") {
          return 1;
        }
        return b.totalSupply - a.totalSupply;
      });
      namespace.wugFeatureCollection.reset(newWugList);
    };

    BaseTableCollectionView.prototype._mapStrategyModelToWugFeature = function(m) {
      return {
        entityId: m.get("recipientEntityId"),
        name: m.get("recipientEntityName"),
        wktGeog: m.get("recipientEntityWktGeog"),
        totalSupply: m.get("supply" + namespace.currYear),
        type: m.get("recipientEntityType"),
        stratTypeId: m.get("typeId")
      };
    };

    BaseTableCollectionView.prototype._setupDataTable = function() {
      var $table, dtColConfig;
      $table = this.$('table');
      dtColConfig = [];
      $('th', $table).each(function(i, th) {
        var $th;
        $th = $(th);
        if ($th.attr('data-sort') != null) {
          return dtColConfig.push({
            sType: $(th).attr('data-sort')
          });
        } else {
          return dtColConfig.push(null);
        }
      });
      $table.dataTable({
        bDestroy: true,
        sPaginationType: "bootstrap",
        aLengthMenu: [[10, 25, 50, 100, 99999], [10, 25, 50, 100, "All"]],
        aoColumns: dtColConfig
      });
    };

    BaseTableCollectionView.prototype._connectTableRowsToWugFeatures = function() {
      var me;
      me = this;
      this.$('table tbody').delegate('td.strategyType', 'hover', function(event) {
        var typeId;
        if (event.type === 'mouseenter') {
          typeId = parseInt($(this).attr('data-type-id'));
          me.trigger("table:hovertype", typeId);
        } else {
          me.trigger("table:hovertype", null);
        }
      });
      this.$('table tbody').delegate('tr', 'hover', function(event) {
        var $target, wugId;
        if (event.type === 'mouseenter') {
          $target = $(this);
          wugId = parseInt($target.attr('data-entity-id'));
          me.trigger("table:hoverwug", wugId);
        } else {
          me.trigger("table:hoverwug", null);
        }
      });
    };

    BaseTableCollectionView.prototype.appendModel = function(model) {
      var modelView;
      modelView = new this.ModelView({
        model: model,
        currYear: namespace.currYear
      });
      this.$('tbody').append(modelView.render().el);
    };

    BaseTableCollectionView.prototype.showNothingFound = function() {
      $('#nothingFoundMessage').fadeIn();
      this.$el.hide();
    };

    BaseTableCollectionView.prototype.hideNothingFound = function() {
      $('#nothingFoundMessage').hide();
    };

    BaseTableCollectionView.prototype.showLoading = function() {
      this.$el.hide();
      this.hideNothingFound();
      $('.tableLoading').show();
    };

    BaseTableCollectionView.prototype.hideLoading = function() {
      $('.tableLoading').hide();
      this.$el.fadeIn();
    };

    return BaseTableCollectionView;

  })(Backbone.View);
});
