// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define([], function() {
  var BaseTableCollectionView;
  return BaseTableCollectionView = (function(_super) {

    __extends(BaseTableCollectionView, _super);

    function BaseTableCollectionView() {
      return BaseTableCollectionView.__super__.constructor.apply(this, arguments);
    }

    BaseTableCollectionView.prototype.initialize = function(ModelView, Collection, tpl) {
      _.bindAll(this, 'render', 'unrender', 'fetchCollection', 'appendModel', 'hideLoading', 'showLoading');
      this.template = _.template(tpl);
      this.collection = new Collection();
      this.ModelView = ModelView;
      ko.applyBindings(this, this.el);
      return null;
    };

    BaseTableCollectionView.prototype.render = function() {
      var sortTable;
      this.$el.html(this.template());
      this.fetchCollection();
      sortTable = this.$('table').stupidtable();
      sortTable.on('aftertablesort', function(evt, data) {
        var $th, iconClass;
        $th = $('th', this);
        $('i', $th).remove();
        iconClass = data.direction === "asc" ? 'icon-caret-up' : 'icon-caret-down';
        $th.eq(data.column).prepend("<i class='" + iconClass + "'></i> ");
        return null;
      });
      return this;
    };

    BaseTableCollectionView.prototype.unrender = function() {
      this.$el.remove();
      return null;
    };

    BaseTableCollectionView.prototype.fetchCollection = function() {
      var _this = this;
      this.showLoading();
      this.collection.fetch({
        data: {
          year: $('#yearNav li.active a').attr('data-value')
        },
        success: function(collection) {
          var m, _i, _len, _ref;
          _ref = collection.models;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            m = _ref[_i];
            _this.appendModel(m);
          }
          _this.hideLoading();
          return null;
        }
      });
      return null;
    };

    BaseTableCollectionView.prototype.appendModel = function(model) {
      var modelView;
      modelView = new this.ModelView({
        model: model
      });
      this.$('tbody').append(modelView.render().el);
      return null;
    };

    BaseTableCollectionView.prototype.showLoading = function() {
      this.$('.loading').show();
      return null;
    };

    BaseTableCollectionView.prototype.hideLoading = function() {
      this.$('.loading').hide();
      return null;
    };

    return BaseTableCollectionView;

  })(Backbone.View);
});
