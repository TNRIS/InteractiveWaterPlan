// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['namespace'], function(namespace) {
  var CountyRegionSelectView;
  return CountyRegionSelectView = (function(_super) {

    __extends(CountyRegionSelectView, _super);

    function CountyRegionSelectView() {
      return CountyRegionSelectView.__super__.constructor.apply(this, arguments);
    }

    CountyRegionSelectView.prototype.initialize = function(options) {
      _.bindAll(this, 'render', 'unrender');
      if (!(options.counties != null) || !options.regions) {
        throw "Must specify options.counties and options.regions";
      }
      this.countyNamesCollection = options.counties;
      this.regionNamesCollection = options.regions;
    };

    CountyRegionSelectView.prototype.render = function() {
      var county, opt, region, _i, _j, _len, _len1, _ref, _ref1;
      this.$regionSelect = $("<select></select>");
      this.$regionSelect.append($("<option value='-1'>Select a Region</option>"));
      _ref = this.regionNamesCollection.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        region = _ref[_i];
        opt = $("<option value='" + (region.get("letter")) + "'>Region " + (region.get("letter")) + "</option>");
        this.$regionSelect.append(opt);
      }
      this.$("#regionSelectContainer").append(this.$regionSelect);
      this.$regionSelect.on("change", function() {
        var $this;
        $this = $(this);
        if ($this.val() === "-1") {
          return;
        }
        router.navigate("#/wms/region/" + ($this.val()), {
          trigger: true
        });
      });
      this.$countySelect = $("<select></select>");
      this.$countySelect.append($("<option value='-1'>Select a County</option>"));
      _ref1 = this.countyNamesCollection.models;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        county = _ref1[_j];
        opt = $("<option value='" + (county.get("id")) + "'>" + (county.get("name")) + "</option>");
        this.$countySelect.append(opt);
      }
      this.$("#countySelectContainer").append(this.$countySelect);
      this.$countySelect.on("change", function() {
        var $this;
        $this = $(this);
        if ($this.val() === "-1") {
          return;
        }
        router.navigate("#/wms/county/" + ($this.val()), {
          trigger: true
        });
      });
      this.$countySelect.chosen();
      this.$regionSelect.chosen();
      return this;
    };

    CountyRegionSelectView.prototype.unrender = function() {
      this.$el.remove();
      return null;
    };

    return CountyRegionSelectView;

  })(Backbone.View);
});
