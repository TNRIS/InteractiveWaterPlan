// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define([], function() {
  var MapView;
  return MapView = (function(_super) {

    __extends(MapView, _super);

    function MapView() {
      return MapView.__super__.constructor.apply(this, arguments);
    }

    MapView.prototype.origCenter = new OpenLayers.LonLat(-99.294317, 31.348335).transform(new OpenLayers.Projection("EPSG:4326"), new OpenLayers.Projection("EPSG:3857"));

    MapView.prototype.origZoom = 6;

    MapView.prototype.map = null;

    MapView.prototype.bingApiKey = 'AkcIEknNDXOC-auGjTFai2j6vXuUeC6vT2-i7_JusAghlLEOwoM1gVC0vz1AcS5o';

    MapView.prototype.render = function() {
      this.$el.empty();
      this.map = new OpenLayers.Map({
        div: this.$el.attr('id'),
        projection: new OpenLayers.Projection("EPSG:3857"),
        displayProjection: new OpenLayers.Projection("EPSG:4326"),
        layers: this._setupBaseLayers(),
        center: this.origCenter,
        zoom: this.origZoom,
        eventListeners: {}
      });
      this.map.addControl(new OpenLayers.Control.LayerSwitcher());
      return this;
    };

    MapView.prototype.unrender = function() {
      this.$el.remove();
      return null;
    };

    MapView.prototype.initialize = function(mapContainerId) {
      this.$el = $("#" + mapContainerId);
      this.el = this.$el[0];
      _.bindAll(this, 'render', 'unrender');
      return null;
    };

    MapView.prototype._setupBaseLayers = function() {
      var baseLayers, bing_aerial, bing_hybrid, bing_road, esri_gray, mapquest_aerial, mapquest_open, toner, watercolor;
      baseLayers = [];
      mapquest_open = new OpenLayers.Layer.XYZ("MapQuest Open Street", ["http://otile1.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png", "http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png", "http://otile3.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png", "http://otile4.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png"], {
        attribution: "Tiles courtesy <a href='http://www.mapquest.com/' target='_blank'>MapQuest</a>",
        transitionEffect: "resize"
      });
      baseLayers.push(mapquest_open);
      esri_gray = new OpenLayers.Layer.XYZ('ESRI Gray', ['http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/${z}/${y}/${x}'], {
        attribution: "Tiles courtesy <a href='http://www.esri.com' target='_blank'>esri</a>"
      });
      baseLayers.push(esri_gray);
      mapquest_aerial = new OpenLayers.Layer.XYZ("MapQuest Open Aerial", ["http://oatile1.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png", "http://oatile2.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png", "http://oatile3.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png", "http://oatile4.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png"], {
        attribution: "Tiles courtesy <a href='http://www.mapquest.com/' target='_blank'>MapQuest</a>",
        transitionEffect: "resize"
      });
      baseLayers.push(mapquest_aerial);
      bing_road = new OpenLayers.Layer.Bing({
        name: "Bing Road",
        key: this.bingApiKey,
        type: "Road",
        transitionEffect: "resize"
      });
      bing_hybrid = new OpenLayers.Layer.Bing({
        name: "Bing Hybrid",
        key: this.bingApiKey,
        type: "AerialWithLabels",
        transitionEffect: "resize"
      });
      bing_aerial = new OpenLayers.Layer.Bing({
        name: "Bing Aerial",
        key: this.bingApiKey,
        type: "Aerial",
        transitionEffect: "resize"
      });
      baseLayers.push(bing_road, bing_hybrid, bing_aerial);
      toner = new OpenLayers.Layer.Stamen("toner-lite", "Stamen Toner");
      watercolor = new OpenLayers.Layer.Stamen("watercolor", "Stamen Watercolor");
      baseLayers.push(toner, watercolor);
      return baseLayers;
    };

    return MapView;

  })(Backbone.View);
});
