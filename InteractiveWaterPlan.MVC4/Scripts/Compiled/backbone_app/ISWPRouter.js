// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['namespace', 'views/MapView', 'views/ThemeNavView', 'views/YearNavView', 'views/MapToolsView', 'views/CountyNetSupplyCollectionView', 'views/RegionStrategyCollectionView', 'views/CountyStrategyCollectionView', 'views/StrategyTypeCollectionView', 'views/EntityStrategyCollectionView', 'views/CountyRegionSelectView', 'collections/StrategyTypeCollection', 'collections/CountyCollection', 'collections/RegionCollection'], function(namespace, MapView, ThemeNavView, YearNavView, MapToolsView, CountyNetSupplyCollectionView, RegionStrategyCollectionView, CountyStrategyCollectionView, StrategyTypeCollectionView, EntityStrategyCollectionView, CountyRegionSelectView, StrategyTypeCollection, CountyCollection, RegionCollection) {
  var ISWPRouter;
  return ISWPRouter = (function(_super) {

    __extends(ISWPRouter, _super);

    function ISWPRouter() {
      return ISWPRouter.__super__.constructor.apply(this, arguments);
    }

    ISWPRouter.prototype.initialize = function(options) {
      _.bindAll(this, 'updateViewsToNewYear');
      this.currTableView = null;
      this.tableContainer = $('#tableContainer')[0];
      this.mapView = new MapView({
        mapContainerId: 'mapContainer',
        bingApiKey: $('#bing_maps_key').val()
      });
      this.mapView.render();
      this.mapToolsView = new MapToolsView({
        el: $('#mapTools')[0],
        mapView: this.mapView
      });
      this.mapToolsView.render();
      this.themeNavView = new ThemeNavView({
        el: $('#themeNavContainer')[0]
      });
      this.themeNavView.render();
      this.yearNavView = new YearNavView({
        el: $('#yearNavContainer')[0]
      });
      namespace.strategyTypes = new StrategyTypeCollection();
      namespace.strategyTypes.reset(initStrategyTypes);
      namespace.countyNames = new CountyCollection();
      namespace.countyNames.reset(initCountyNames);
      namespace.regionNames = new RegionCollection();
      namespace.regionNames.reset(initRegionNames);
      this.countyRegionSelect = new CountyRegionSelectView({
        el: $('#regionCountySelectContainer')[0],
        counties: namespace.countyNames,
        regions: namespace.regionNames
      });
      this.countyRegionSelect.render();
    };

    ISWPRouter.prototype.updateViewsToNewYear = function(newYear) {
      var currRoute, newRoute, oldYear, y, _i, _len, _ref;
      currRoute = Backbone.history.fragment;
      oldYear = "";
      _ref = namespace.VALID_YEARS;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        y = _ref[_i];
        if (currRoute.indexOf(y + "/") !== -1) {
          oldYear = y;
          break;
        }
      }
      if (oldYear === "") {
        throw "Year invalid.";
        Backbone.history.navigate("");
      }
      newRoute = currRoute.replace(oldYear, newYear);
      Backbone.history.navigate("#/" + newRoute, {
        trigger: true
      });
    };

    ISWPRouter.prototype.routes = {
      "": "default",
      ":year/wms": "wmsNetCountySupplies",
      ":year/wms/region/:regionLetter": "wmsRegion",
      ":year/wms/county/:countyId": "wmsCounty",
      ":year/wms/type/:typeId": "wmsType",
      ":year/wms/entity/:entityId": "wmsEntity"
    };

    ISWPRouter.prototype["default"] = function() {
      Backbone.history.navigate("#/" + namespace.currYear + "/wms", {
        trigger: true
      });
    };

    ISWPRouter.prototype.wmsNetCountySupplies = function(year) {
      namespace.currYear = year;
      if (this.currTableView != null) {
        this.currTableView = this.currTableView.unrender();
      }
      this.currTableView = new CountyNetSupplyCollectionView({
        el: this.tableContainer
      });
      this.currTableView.render();
      this.yearNavView.render().currentYear.subscribe(this.updateViewsToNewYear);
      this.themeNavView.render();
    };

    ISWPRouter.prototype.wmsRegion = function(year, regionLetter) {
      namespace.currYear = year;
      if (this.currTableView != null) {
        this.currTableView = this.currTableView.unrender();
      }
      this.currTableView = new RegionStrategyCollectionView({
        el: this.tableContainer,
        id: regionLetter,
        name: regionLetter
      });
      this.currTableView.render();
      this.yearNavView.render().currentYear.subscribe(this.updateViewsToNewYear);
      this.themeNavView.render();
    };

    ISWPRouter.prototype.wmsCounty = function(year, countyId) {
      var countyName;
      namespace.currYear = year;
      if (this.currTableView != null) {
        this.currTableView = this.currTableView.unrender();
      }
      countyName = namespace.countyNames.get(countyId).get('name');
      this.currTableView = new CountyStrategyCollectionView({
        el: this.tableContainer,
        id: countyId,
        name: countyName
      });
      this.currTableView.render();
      this.yearNavView.render().currentYear.subscribe(this.updateViewsToNewYear);
      this.themeNavView.render();
    };

    ISWPRouter.prototype.wmsType = function(year, typeId) {
      var typeName;
      namespace.currYear = year;
      if (this.currTableView != null) {
        this.currTableView = this.currTableView.unrender();
      }
      typeName = namespace.strategyTypes.get(typeId).get('name');
      this.currTableView = new StrategyTypeCollectionView({
        el: this.tableContainer,
        id: typeId,
        name: typeName
      });
      this.currTableView.render();
      this.yearNavView.render().currentYear.subscribe(this.updateViewsToNewYear);
      this.themeNavView.render();
    };

    ISWPRouter.prototype.wmsEntity = function(year, entityId) {
      var EntityModel, entity,
        _this = this;
      namespace.currYear = year;
      if (this.currTableView != null) {
        this.currTableView = this.currTableView.unrender();
      }
      EntityModel = Backbone.Model.extend({
        url: "" + BASE_API_PATH + "api/entity/" + entityId
      });
      entity = new EntityModel();
      entity.fetch({
        success: function(model) {
          _this.currTableView = new EntityStrategyCollectionView({
            el: _this.tableContainer,
            id: entityId,
            name: model.get("name")
          });
          _this.currTableView.render();
          _this.yearNavView.render().currentYear.subscribe(_this.updateViewsToNewYear);
          _this.themeNavView.render();
        }
      });
    };

    return ISWPRouter;

  })(Backbone.Router);
});
