Herein lies the styles for tiles so please come in, stay and enjoy a while.


CartoCSS files are the *.mss files. From these, the mapnik XML files are
generated via Tilemill. The workflow is something like this:

  - Open TileMill, add layers and copy the *.mss file over. Make sure your layer
    IDs in tilemill match the IDs in the CartoCSS.
  - From TileMill, export to Mapnik XML and copy that file over.
  - Adjust the Mapnik XML file to account for paths on the server. This is done
    by converting to jinja templates and adding a few variables. Ansible fills
    in these variables when deploying.



The adjustments that need to be made to Mapnik XML files are as follows:

    - adjust file paths in the `<Datasource>` element so that:
        ```
        <Datasource>
           <Parameter name="file"><![CDATA[/Users/wilsaj/Documents/MapBox/project/rwpa_with_coast_nad83/layers/rwpawithcoastnad83/RWPA_with_Coast_NAD83.shp]]></Parameter>
           ...
        </Datasource>
        ```

      becomes:
        <Datasource>
           <Parameter name="file"><![CDATA[{{ spatial_dir }}/RWPAs//RWPA_with_Coast_NAD83.shp]]></Parameter>
           ...
        </Datasource>


    - If you use any custom fonts (e.g. 'Open Sans'), make sure the fonts .ttf
      files are in the fonts directory (InteractiveWaterPlan/spatial/fonts) add
      a font-directory to the Map element so that:
        ```
        <Map srs="+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0
        +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
        background-color="#00000000"
        maximum-extent="-20037508.34,-20037508.34,20037508.34,20037508.34">
        ```

      becomes:
        ```
        <Map srs="+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0
        +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
        background-color="#00000000"
        maximum-extent="-20037508.34,-20037508.34,20037508.34,20037508.34"
        font-directory="{{ tilestache_font_dir }}">
        ```



The house and senate district CartoCSS files are generated by a special script
that avoids repeating neighboring colors. It is a node script which means it's
super special and you should make sure to give it a hug and tell it that you are
proud of it. To run:
  - grab the dependencies (`npm install`)
  - run `node generate-colors.js <legislative_body>` where `<legislative_body>`
    is either `house` or `senate`
  - you may need to adjust some of the colors manually for visual balance if
    you're into that sort of thing but the generated output will at least avoid
    putting two of the same color on neighboring districts
